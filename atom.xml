<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jony&#39;s blog</title>
  
  <subtitle>记录每一次成长</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-29T06:12:54.515Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jony</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tip-数据库迁移错误</title>
    <link href="http://yoursite.com/2020/03/26/tip/tip-mysqlqy/"/>
    <id>http://yoursite.com/2020/03/26/tip/tip-mysqlqy/</id>
    <published>2020-03-26T15:02:13.000Z</published>
    <updated>2020-03-29T06:12:54.515Z</updated>
    
    <content type="html"><![CDATA[<h1>MySQL表的导出导入报错</h1><p>MySQL表的导出导入指令以及导入失败ERROR 1273 (HY000): Unknown collation: 'utf8mb4_0900_ai_ci’解决方案</p><p>错误提示：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">ERROR </span>1273 (HY000): Unknown collation: 'utf8mb4_0900_ai_ci'<br></code></pre></td></tr></table></figure><a id="more"></a><p>错误原因：高版本数据库向低版本数据库迁移数据导致</p><p>解决办法：</p><p>用文本编辑器打开.sql文件，<strong>command+F</strong> 搜索<em><strong>utf8mb4_0900_ai_ci</strong></em><br>将其替换为<em><strong>utf8_general_ci</strong></em></p><p>搜索 <em><strong>utf8mb4</strong></em><br>将其替换为<em><strong>utf8</strong></em></p><p>tip：替换的时导出的文件，不是sql数据库管理中的编码规则</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;MySQL表的导出导入报错&lt;/h1&gt;
&lt;p&gt;MySQL表的导出导入指令以及导入失败ERROR 1273 (HY000): Unknown collation: &#39;utf8mb4_0900_ai_ci’解决方案&lt;/p&gt;
&lt;p&gt;错误提示：&lt;/p&gt;
&lt;figure class=&quot;highlight subunit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs subunit&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;ERROR &lt;/span&gt;1273 (HY000): Unknown collation: &#39;utf8mb4_0900_ai_ci&#39;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="避坑指南" scheme="http://yoursite.com/categories/%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="避坑指南" scheme="http://yoursite.com/tags/%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>阿里云作为图床</title>
    <link href="http://yoursite.com/2020/03/25/tip/tip-fdl/"/>
    <id>http://yoursite.com/2020/03/25/tip/tip-fdl/</id>
    <published>2020-03-25T15:02:34.000Z</published>
    <updated>2020-03-29T06:12:50.239Z</updated>
    
    <content type="html"><![CDATA[<h1>为什么用阿里云OSS作图床</h1><h2 id="免费图床">免费图床</h2><ul><li>完全免费图床<br>我知道的完全免费而且好用的就是<strong>SMMS</strong>和<strong>码云</strong>，但是他们有一个弊端就是不够安全，将图片上传后，万一有一天网站挂了或者停止外链获取之后，你的博客或者应用就会出现一堆无图片的情况。那会看着一大堆图片，还有需要修改一大堆链接地址……emmm不多说。虽然现在网上有很多python写的脚本可以自动化完成，但是依旧很费心费力，而且一个操作失误也可能会酿成大错。</li></ul><a id="more"></a><ul><li>一定额度内免费切稳定安全的<br>七牛储存，这个作为国内云服务提供商，稳定性还是挺不错的，新注册用户自带10G免费额度，如果你不用https来解析的话，完全不用花钱。之前一直用用七牛云做图床，其实在速度方面还是可以的，我的很多图片都储存在上面。</li></ul><h2 id="七牛云做图床的坑点">七牛云做图床的坑点</h2><p>七牛云因为有不法分子利用这个免费空间的空子，将一些违法的东西上传到上面（比如你硬盘里的东西），导致七牛云开始强制域名绑定且必须是<strong>备案</strong>的域名，否则只能用三十天测试域名，<strong>到期后不能找回！！！</strong> 我用图床主要是为小程序和博客以及一些小项目做外链，小程序的后台放在了新浪云应用，所以也没有租服务器的需求，新浪云应用的域名备案需要花费费用达到一定额度才可以，所以放弃。这就导致了……迁移图床，于是综合考虑，把域名迁移到阿里云。</p><p>7.2元成本购买一年40G的OSS对博客里说完全够用</p><p><img src="http://jony-blog.oss-cn-beijing.aliyuncs.com/blog/nLDYQ6.png" alt="nLDYQ6"></p><p>具体如何配置百度很多教程，不多赘述，主要说说几个需要注意的点：</p><h1>阿里云OSS坑点</h1><h2 id="购买完OSS记着往余额充点钱">购买完OSS记着往余额充点钱</h2><p>购买完OSS并配置完成后，一切功能正常，就没再管，但是过了两天突然发现博客图片不见了，作者页面的视频也没了，复制src链接到浏览器也无法访问，进入控制后台才发现原来是欠费了！！！因为是按量计费，如果你之前没用过阿里云的服务的话，那你购买完OSS一定要记着再充点钱进去，tip:其实如果你绑定了邮箱的话它会邮箱提醒你的。<br><img src="http://jony-blog.oss-cn-beijing.aliyuncs.com/blog/J7aqUJ.png" alt="J7aqUJ"></p><h2 id="设置-Referer-白名单">设置 Referer 白名单</h2><p>防盗链可以很好的防止其他用户盗用自己的图片链接，用在自己的应用下面，因为阿里云按量付费，所以设置白名单很有必要。还有现在恶意爬虫也会让你分分钟余额清零。<br>设置防盗链这也是一个坑点，一定要记着给域名前面加请求协议，也就是&quot;http://“或者&quot;https://”，我刚开始没有加（因为给的样例就没有），所以一直无法访问，百思不得其解，最后直接从浏览器复制地址进去才OK了。</p><p><img src="http://jony-blog.oss-cn-beijing.aliyuncs.com/blog/HmXGPz.png" alt="HmXGPz"></p><h2 id="一定要注意选择标准储存（补）">一定要注意选择标准储存（补）</h2><p>购买的“标准存储包(中国大陆)”只能用来抵扣“标准”的Bucket，不能用来抵扣“低频访问”的Bucket，之前买的标准储存实际上没有使用！得亏发现的及时，于是下载了阿里的图形化工具进行了图床的迁移（在同一地区且文件小于1G）</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;为什么用阿里云OSS作图床&lt;/h1&gt;
&lt;h2 id=&quot;免费图床&quot;&gt;免费图床&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;完全免费图床&lt;br&gt;
我知道的完全免费而且好用的就是&lt;strong&gt;SMMS&lt;/strong&gt;和&lt;strong&gt;码云&lt;/strong&gt;，但是他们有一个弊端就是不够安全，将图片上传后，万一有一天网站挂了或者停止外链获取之后，你的博客或者应用就会出现一堆无图片的情况。那会看着一大堆图片，还有需要修改一大堆链接地址……emmm不多说。虽然现在网上有很多python写的脚本可以自动化完成，但是依旧很费心费力，而且一个操作失误也可能会酿成大错。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="避坑指南" scheme="http://yoursite.com/categories/%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="避坑指南" scheme="http://yoursite.com/tags/%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/"/>
    
      <category term="使用分享" scheme="http://yoursite.com/tags/%E4%BD%BF%E7%94%A8%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅的使用emmet-css篇</title>
    <link href="http://yoursite.com/2020/03/11/HC/emmetCSS/"/>
    <id>http://yoursite.com/2020/03/11/HC/emmetCSS/</id>
    <published>2020-03-11T08:12:38.000Z</published>
    <updated>2020-03-29T06:12:04.566Z</updated>
    
    <content type="html"><![CDATA[<h1>如何优雅的使用emmet-css篇</h1><p>如果你想知道如何使用emmet编辑html，请打开<a href="">如何优雅的使用emmet-html篇</a></p><h2 id="emmet语法-css">emmet语法-css</h2><p>CSS3的新功能为Web开发人员带来了福气：只需几行代码，我们就可以完成几年前几乎不可能的事情。Emmet的CSS解析器具有一个不错的功能，可以极大地改善您的CSS3体验。每次在CSS属性或其缩写前面加上连字符时，Emmet都会自动创建该属性的供应商前缀副本。例如，-bdrs缩写将扩展为</p><a id="more"></a><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">-webkit-<span class="hljs-built_in">border</span>-<span class="hljs-built_in">radius</span>: ;<br>-moz-<span class="hljs-built_in">border</span>-<span class="hljs-built_in">radius</span>: ;<br><span class="hljs-built_in">border</span>-<span class="hljs-built_in">radius</span>: ;<br></code></pre></td></tr></table></figure><h2 id="怎么运行的？">怎么运行的？</h2><p>每当你在前面加上连字符的情况下扩展缩写时，Emmet都会删除连字符，并snippets.json在其余的缩写中查找代码段定义。例如，对于-bdrs缩写，它将查找bdrs定义。snippet.json具有以下定义：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">"bdrs"</span>: <span class="hljs-string">"border-radius:|;"</span><br></code></pre></td></tr></table></figure><p>这意味着bdrs将扩展为border-radius<br>CSS解析器找出应输出的属性名称后，它将在特殊的供应商目录中查找它的出现。这些目录被定义为首css.{vendor}Properties选项中的条目，并且可以被用户覆盖。{vendor}是浏览器的供应商前缀，例如webkit，moz等等。</p><p>如果在这些目录中的任何一个中都找到扩展属性，则将使用其供应商前缀来产生前缀属性。否则，将使用所有前缀。</p><p>例如，在border-radius中定义了属性css.webkitProperties，css.mozProperties因此该属性将与webkit和moz前缀一起输出。在另一方面，foo物业没有定义，因此它会与所有可用的前缀输出，当你在任何地方展开-foo简称：webkit，moz，ms和o。使用最近实现的尖端CSS属性特别有用。</p><p>想象一下，谷歌浏览器super-foo昨天实现了属性，而你想在项目中使用它。您可以扩展-super-foo缩写，从而产生以下代码段：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs groovy">-webkit-<span class="hljs-keyword">super</span>-<span class="hljs-string">foo:</span> ;<br>-moz-<span class="hljs-keyword">super</span>-<span class="hljs-string">foo:</span> ;<br>-ms-<span class="hljs-keyword">super</span>-<span class="hljs-string">foo:</span> ;<br>-o-<span class="hljs-keyword">super</span>-<span class="hljs-string">foo:</span> ;<br><span class="hljs-keyword">super</span>-<span class="hljs-string">foo:</span> ;<br></code></pre></td></tr></table></figure><h2 id="Gradients">Gradients</h2><p>必须使用不同的供应商前缀多次重复长渐变定义。另外，如果要覆盖所有受梯度支持的浏览器，则必须使用三种不同的符号：旧的Webkit，当前支持的（linear-gradient(top, …)）和W3C建议的（linear-gradient(to bottom, …)）。</p><p>通常，用户更喜欢使用第三方GUI来生成渐变定义，但是您可以在编辑器中更快地完成相同的操作。</p><h2 id="模糊搜索（重点！）">模糊搜索（重点！）</h2><p>如果查看Cheat Sheet，您会发现有太多CSS片段需要记住。另外，出于逻辑上的分离，其中一些可能会有些冗长。</p><p>为了使CSS编写更加容易，Emmet 对CSS代码段实施了模糊搜索逻辑：每次输入未知缩写时，Emmet都会尝试查找最接近的代码段定义。</p><p>例如，除了写ov:h（overflow: hidden;）缩写外，您还可以编写ov-h，ovh甚至oh。您可以在下面的文本编辑器中进行模糊搜索。试着找到尽可能多的变化愈好（用Tab键展开缩写）的bxz:cb，ovx:h和pos:a片段。</p><h3 id="例如：">例如：</h3><p>你想输入background-image: url();<br>在编辑器输入</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">bgi</span><br></code></pre></td></tr></table></figure><p>按下TAB</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">background-image</span>: url(<span class="hljs-string"></span>);<br></code></pre></td></tr></table></figure><h1>以上</h1><p>看完不代表你回了，一定要自己动手多练习，熟练了之后，你的代码速度会有很大的飞跃。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;如何优雅的使用emmet-css篇&lt;/h1&gt;
&lt;p&gt;如果你想知道如何使用emmet编辑html，请打开&lt;a href=&quot;&quot;&gt;如何优雅的使用emmet-html篇&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;emmet语法-css&quot;&gt;emmet语法-css&lt;/h2&gt;
&lt;p&gt;CSS3的新功能为Web开发人员带来了福气：只需几行代码，我们就可以完成几年前几乎不可能的事情。Emmet的CSS解析器具有一个不错的功能，可以极大地改善您的CSS3体验。每次在CSS属性或其缩写前面加上连字符时，Emmet都会自动创建该属性的供应商前缀副本。例如，-bdrs缩写将扩展为&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端开发" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="实战总结" scheme="http://yoursite.com/tags/%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅的使用emmet-html篇</title>
    <link href="http://yoursite.com/2020/03/10/HC/emmetHTML/"/>
    <id>http://yoursite.com/2020/03/10/HC/emmetHTML/</id>
    <published>2020-03-10T11:23:18.000Z</published>
    <updated>2020-03-29T06:12:09.286Z</updated>
    
    <content type="html"><![CDATA[<h1>如何优雅的使用emmet</h1><h2 id="什么是emmet">什么是emmet</h2><p>这篇文章将教你如何用emmet快速编写html代码和css代码<br>官方解释：</p><blockquote><p>Emmet uses syntax similar to CSS selectors for describing elements’ positions inside generated tree and elements’ attributes.<br>翻译：<br>Emmet使用类似于CSS选择器的语法来描述元素在生成的树中的位置和元素的属性。</p></blockquote><a id="more"></a><p>通俗来说，emmet为前端开发提供了快速编辑能力，能大大提高代码书写，只需要敲一行代码就能生成你想要的完整HTML结构，</p><h2 id="举个栗子">举个栗子</h2><p>在html编辑器输入如下内容</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">div</span>.box1&gt;<span class="hljs-selector-tag">p</span>.title+<span class="hljs-selector-tag">ul</span>.list&gt;<span class="hljs-selector-tag">li</span>.list_li$*<span class="hljs-number">5</span>&#123;我是第$个&#125;^<span class="hljs-selector-tag">div</span>.box2&gt;ul&gt;li<br></code></pre></td></tr></table></figure><p>按下TAB键，就发现出现了一个DOM数</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;div <span class="hljs-keyword">class</span>="<span class="hljs-symbol">box1</span>"&gt;<br>    &lt;<span class="hljs-symbol">p</span> <span class="hljs-symbol">class</span>="<span class="hljs-symbol">title</span>"&gt;&lt;/<span class="hljs-symbol">p</span>&gt;<br>    &lt;<span class="hljs-symbol">ul</span> <span class="hljs-symbol">class</span>="<span class="hljs-symbol">list</span>"&gt;<br>        &lt;<span class="hljs-symbol">li</span> <span class="hljs-symbol">class</span>="<span class="hljs-symbol">list_li1</span>"&gt;我是第<span class="hljs-symbol">1</span>个&lt;/<span class="hljs-symbol">li</span>&gt;<br>        &lt;<span class="hljs-symbol">li</span> <span class="hljs-symbol">class</span>="<span class="hljs-symbol">list_li2</span>"&gt;我是第<span class="hljs-symbol">2</span>个&lt;/<span class="hljs-symbol">li</span>&gt;<br>        &lt;<span class="hljs-symbol">li</span> <span class="hljs-symbol">class</span>="<span class="hljs-symbol">list_li3</span>"&gt;我是第<span class="hljs-symbol">3</span>个&lt;/<span class="hljs-symbol">li</span>&gt;<br>        &lt;<span class="hljs-symbol">li</span> <span class="hljs-symbol">class</span>="<span class="hljs-symbol">list_li4</span>"&gt;我是第<span class="hljs-symbol">4</span>个&lt;/<span class="hljs-symbol">li</span>&gt;<br>        &lt;<span class="hljs-symbol">li</span> <span class="hljs-symbol">class</span>="<span class="hljs-symbol">list_li5</span>"&gt;我是第<span class="hljs-symbol">5</span>个&lt;/<span class="hljs-symbol">li</span>&gt;<br>    &lt;/<span class="hljs-symbol">ul</span>&gt;<br>    &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>="<span class="hljs-symbol">box2</span>"&gt;<br>        &lt;<span class="hljs-symbol">ul</span>&gt;<br>            &lt;<span class="hljs-symbol">li</span>&gt;&lt;/<span class="hljs-symbol">li</span>&gt;<br>            &lt;<span class="hljs-symbol">li</span>&gt;&lt;/<span class="hljs-symbol">li</span>&gt;<br>            &lt;<span class="hljs-symbol">li</span>&gt;&lt;/<span class="hljs-symbol">li</span>&gt;<br>        &lt;/<span class="hljs-symbol">ul</span>&gt;<br>    &lt;/<span class="hljs-symbol">div</span>&gt;<br>&lt;/<span class="hljs-symbol">div</span>&gt;<br></code></pre></td></tr></table></figure><p>是不是瞬间理解了并且发现了他的强大之处。</p><h2 id="emmet语法">emmet语法</h2><h3 id="元素">元素</h3><div class="note warning"><p>可以使用元素的名字，如div或p以生成HTML标签。Emmet没有一组预定义的可用标签名称，您可以编写任何单词并将其转换为标签：</p></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">div → <span class="hljs-tag">&lt; <span class="hljs-attr">div</span>&gt;</span><span class="hljs-tag">&lt;/ <span class="hljs-attr">div</span>&gt;</span><br>foo → <span class="hljs-tag">&lt; <span class="hljs-attr">foo</span>&gt;</span><span class="hljs-tag">&lt; /<span class="hljs-attr">foo</span>&gt;</span><br></code></pre></td></tr></table></figure><p>等其他元素。</p><h3 id="Child">Child: &gt;</h3><div class="note warning"><p>您可以使用>运算符将元素相互嵌套：</p></div> <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">div</span>&gt;ul&gt;li<br></code></pre></td></tr></table></figure><p>按下TAB</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;div&gt;</span><br>    <span class="hljs-section">&lt;ul&gt;</span><br>        <span class="hljs-section">&lt;li&gt;</span><span class="hljs-section">&lt;/li&gt;</span><br>    <span class="hljs-section">&lt;/ul&gt;</span><br><span class="hljs-section">&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><h3 id="兄弟：">兄弟： +</h3><div class="note warning"><p>使用+运算符将元素彼此放置在同一DOM层级上：</p></div><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">div</span>+p+bq<br></code></pre></td></tr></table></figure><p>按下TAB</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;div&gt;</span><span class="hljs-section">&lt;/div&gt;</span><br><span class="hljs-section">&lt;p&gt;</span><span class="hljs-section">&lt;/p&gt;</span><br><span class="hljs-section">&lt;blockquote&gt;</span><span class="hljs-section">&lt;/blockquote&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Climb-up">Climb-up: ^</h3><div class="note warning"><p>使用>运算符，您将向下生成树，所有同级元素的位置将针对最深的元素进行解析</p></div>例如：如果你使用<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">div</span>+<span class="hljs-keyword">div</span>&gt;p&gt;span+em<br></code></pre></td></tr></table></figure><p>按下TAB</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;div&gt;</span><span class="hljs-section">&lt;/div&gt;</span><br><span class="hljs-section">&lt;div&gt;</span><br>    <span class="hljs-section">&lt;p&gt;</span><span class="hljs-section">&lt;span&gt;</span><span class="hljs-section">&lt;/span&gt;</span><span class="hljs-section">&lt;em&gt;</span><span class="hljs-section">&lt;/em&gt;</span><span class="hljs-section">&lt;/p&gt;</span><br><span class="hljs-section">&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><div class="note warning"><p>如果使用^运算符，您可以在DOM树上爬上一层，并更改应显示以下元素的上下文：请和上面的例子做对比</p></div><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">div</span>+<span class="hljs-keyword">div</span>&gt;p&gt;span+em^bq<br></code></pre></td></tr></table></figure><p>按下TAB</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;div&gt;</span><span class="hljs-section">&lt;/div&gt;</span><br><span class="hljs-section">&lt;div&gt;</span><br>    <span class="hljs-section">&lt;p&gt;</span><span class="hljs-section">&lt;span&gt;</span><span class="hljs-section">&lt;/span&gt;</span><span class="hljs-section">&lt;em&gt;</span><span class="hljs-section">&lt;/em&gt;</span><span class="hljs-section">&lt;/p&gt;</span><br>    <span class="hljs-section">&lt;blockquote&gt;</span><span class="hljs-section">&lt;/blockquote&gt;</span><br><span class="hljs-section">&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><div class="note warning"><p>可以根据需要使用任意多个^运算符，每个运算符将上移一个级别：</p></div><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">div</span>+<span class="hljs-keyword">div</span>&gt;p&gt;span+em^^^bq<br></code></pre></td></tr></table></figure><p>按下TAB</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;div&gt;</span><span class="hljs-section">&lt;/div&gt;</span><br><span class="hljs-section">&lt;div&gt;</span><br>    <span class="hljs-section">&lt;p&gt;</span><span class="hljs-section">&lt;span&gt;</span><span class="hljs-section">&lt;/span&gt;</span><span class="hljs-section">&lt;em&gt;</span><span class="hljs-section">&lt;/em&gt;</span><span class="hljs-section">&lt;/p&gt;</span><br><span class="hljs-section">&lt;/div&gt;</span><br><span class="hljs-section">&lt;blockquote&gt;</span><span class="hljs-section">&lt;/blockquote&gt;</span><br></code></pre></td></tr></table></figure><h3 id="乘法：">乘法： *</h3><div class="note warning"><p>使用*运算符，您可以定义元素应输出多少次：</p></div><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ul&gt;li*<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure>按下TAB<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;ul&gt;</span><br>    <span class="hljs-section">&lt;li&gt;</span><span class="hljs-section">&lt;/li&gt;</span><br>    <span class="hljs-section">&lt;li&gt;</span><span class="hljs-section">&lt;/li&gt;</span><br>    <span class="hljs-section">&lt;li&gt;</span><span class="hljs-section">&lt;/li&gt;</span><br>    <span class="hljs-section">&lt;li&gt;</span><span class="hljs-section">&lt;/li&gt;</span><br>    <span class="hljs-section">&lt;li&gt;</span><span class="hljs-section">&lt;/li&gt;</span><br><span class="hljs-section">&lt;/ul&gt;</span><br></code></pre></td></tr></table></figure><h3 id="分组：">分组： ()</h3><div class="note warning"><p>Emmets的高级用户使用括号将复杂缩写的子树分组：</p></div><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">div&gt;<span class="hljs-comment">(header&gt;ul&gt;li*2&gt;a)</span>+footer&gt;p<br></code></pre></td></tr></table></figure>按下TAB<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><div class="note warning"><p>如果使用浏览器的DOM，则可以将组视为文档片段：每个组均包含缩写子树，并且以下所有与第一个元素相同的元素都插入到该元素中。您可以将组彼此嵌套，并使用乘法*运算符将它们组合在一起：</p></div><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">(<span class="hljs-keyword">div</span>&gt;<span class="hljs-built_in">dl</span>&gt;(<span class="hljs-built_in">dt</span>+<span class="hljs-built_in">dd</span>)*<span class="hljs-number">3</span>)+footer&gt;p<br></code></pre></td></tr></table></figure><p>按下TAB</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;div&gt;</span><br>    <span class="hljs-section">&lt;dl&gt;</span><br>        <span class="hljs-section">&lt;dt&gt;</span><span class="hljs-section">&lt;/dt&gt;</span><br>        <span class="hljs-section">&lt;dd&gt;</span><span class="hljs-section">&lt;/dd&gt;</span><br>        <span class="hljs-section">&lt;dt&gt;</span><span class="hljs-section">&lt;/dt&gt;</span><br>        <span class="hljs-section">&lt;dd&gt;</span><span class="hljs-section">&lt;/dd&gt;</span><br>        <span class="hljs-section">&lt;dt&gt;</span><span class="hljs-section">&lt;/dt&gt;</span><br>        <span class="hljs-section">&lt;dd&gt;</span><span class="hljs-section">&lt;/dd&gt;</span><br>    <span class="hljs-section">&lt;/dl&gt;</span><br><span class="hljs-section">&lt;/div&gt;</span><br><span class="hljs-section">&lt;footer&gt;</span><br>    <span class="hljs-section">&lt;p&gt;</span><span class="hljs-section">&lt;/p&gt;</span><br><span class="hljs-section">&lt;/footer&gt;</span><br></code></pre></td></tr></table></figure><h2 id="属性运算符">属性运算符</h2><h3 id="ID和CLASS">ID和CLASS</h3><div class="note warning"><p>在CSS中，您可以使用elem#id和elem.class表示法来访问具有指定id或class属性的元素。在Emmet中，可以使用完全相同的语法将这些属性添加到指定的元素</p></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-id">#header</span>+<span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.page</span>+<span class="hljs-selector-tag">div</span><span class="hljs-selector-id">#footer</span><span class="hljs-selector-class">.class1</span><span class="hljs-selector-class">.class2</span><span class="hljs-selector-class">.class3</span><br></code></pre></td></tr></table></figure>按下TAB<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">"header"</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"page"</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">"footer"</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"class1 class2 class3"</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="自定义属性">自定义属性</h3><div class="note warning"><p>您可以使用[attr]符号（如CSS中一样）向元素添加自定义属性：</p></div><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">td[<span class="hljs-attribute">title</span>=<span class="hljs-string">"Hello world!"</span> <span class="hljs-attribute">colspan</span>=3]<br></code></pre></td></tr></table></figure>按下TAB<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;td <span class="hljs-attribute">title</span>=<span class="hljs-string">"Hello world!"</span> <span class="hljs-attribute">colspan</span>=<span class="hljs-string">"3"</span>&gt;&lt;/td&gt;<br></code></pre></td></tr></table></figure><h3 id="项目编号：">项目编号： $</h3><div class="note warning"><p>随着乘法*运算符可以重复的元素，但是$你可以编号它们。将$运算符放在元素名称，属性名称或属性值内，以输出当前重复元素的数量：</p></div><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ul&gt;li.item$*<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure>按下TAB<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;ul&gt;<br>    &lt;li <span class="hljs-keyword">class</span>="<span class="hljs-symbol">item1</span>"&gt;&lt;/<span class="hljs-symbol">li</span>&gt;<br>    &lt;<span class="hljs-symbol">li</span> <span class="hljs-symbol">class</span>="<span class="hljs-symbol">item2</span>"&gt;&lt;/<span class="hljs-symbol">li</span>&gt;<br>    &lt;<span class="hljs-symbol">li</span> <span class="hljs-symbol">class</span>="<span class="hljs-symbol">item3</span>"&gt;&lt;/<span class="hljs-symbol">li</span>&gt;<br>    &lt;<span class="hljs-symbol">li</span> <span class="hljs-symbol">class</span>="<span class="hljs-symbol">item4</span>"&gt;&lt;/<span class="hljs-symbol">li</span>&gt;<br>    &lt;<span class="hljs-symbol">li</span> <span class="hljs-symbol">class</span>="<span class="hljs-symbol">item5</span>"&gt;&lt;/<span class="hljs-symbol">li</span>&gt;<br>&lt;/<span class="hljs-symbol">ul</span>&gt;<br></code></pre></td></tr></table></figure><div class="note warning"><p>您可以$连续使用多个以零填充数字：</p></div><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">ul&gt;li.item<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-symbol">$</span>*<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure>按下TAB<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;ul&gt;<br>    &lt;li <span class="hljs-keyword">class</span>="<span class="hljs-symbol">item001</span>"&gt;&lt;/<span class="hljs-symbol">li</span>&gt;<br>    &lt;<span class="hljs-symbol">li</span> <span class="hljs-symbol">class</span>="<span class="hljs-symbol">item002</span>"&gt;&lt;/<span class="hljs-symbol">li</span>&gt;<br>    &lt;<span class="hljs-symbol">li</span> <span class="hljs-symbol">class</span>="<span class="hljs-symbol">item003</span>"&gt;&lt;/<span class="hljs-symbol">li</span>&gt;<br>    &lt;<span class="hljs-symbol">li</span> <span class="hljs-symbol">class</span>="<span class="hljs-symbol">item004</span>"&gt;&lt;/<span class="hljs-symbol">li</span>&gt;<br>    &lt;<span class="hljs-symbol">li</span> <span class="hljs-symbol">class</span>="<span class="hljs-symbol">item005</span>"&gt;&lt;/<span class="hljs-symbol">li</span>&gt;<br>&lt;/<span class="hljs-symbol">ul</span>&gt;<br></code></pre></td></tr></table></figure><p>以上基本上已经将常用的基本htm部分语法总结提炼了出来，多加练习体会即可快速上手。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;如何优雅的使用emmet&lt;/h1&gt;
&lt;h2 id=&quot;什么是emmet&quot;&gt;什么是emmet&lt;/h2&gt;
&lt;p&gt;这篇文章将教你如何用emmet快速编写html代码和css代码&lt;br&gt;
官方解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Emmet uses syntax similar to CSS selectors for describing elements’ positions inside generated tree and elements’ attributes.&lt;br&gt;
翻译：&lt;br&gt;
Emmet使用类似于CSS选择器的语法来描述元素在生成的树中的位置和元素的属性。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端开发" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="实战总结" scheme="http://yoursite.com/tags/%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>css3如何实现炫酷背景</title>
    <link href="http://yoursite.com/2020/02/27/HC/cssbg/"/>
    <id>http://yoursite.com/2020/02/27/HC/cssbg/</id>
    <published>2020-02-27T11:13:04.000Z</published>
    <updated>2020-03-29T06:11:37.527Z</updated>
    
    <content type="html"><![CDATA[<h1>小程序如何实现炫酷背景</h1><p>该背景主要是通过css让多个元素在不同时间旋转来实现，再给元素加边框和阴影即可。</p><p>该实例虽然是小程序的，但是依然可是在html中实现，只需要将view改为ul&gt;li标签无序列表即可。</p><a id="more"></a><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cos">&lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"shadows"</span> id=<span class="hljs-string">"bg"</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span>&gt; &lt;/<span class="hljs-keyword">view</span>&gt;<br> &lt;<span class="hljs-keyword">view</span>&gt; &lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span>&gt; &lt;/<span class="hljs-keyword">view</span>&gt;<br> &lt;<span class="hljs-keyword">view</span>&gt; &lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span>&gt; &lt;/<span class="hljs-keyword">view</span>&gt;<br> &lt;<span class="hljs-keyword">view</span>&gt; &lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span>&gt; &lt;/<span class="hljs-keyword">view</span>&gt;<br> &lt;<span class="hljs-keyword">view</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>&lt;/<span class="hljs-keyword">view</span>&gt;<br>&lt;<span class="hljs-keyword">view</span>  <span class="hljs-keyword">class</span>=<span class="hljs-string">"img"</span>&gt;<br>&lt;image src=<span class="hljs-string">"url.png"</span>&gt;&lt;/image&gt;<br>&lt;/<span class="hljs-keyword">view</span>&gt;<br>&lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"drive"</span>&gt;<br> &lt;<span class="hljs-keyword">view</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br> &lt;<span class="hljs-keyword">view</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br> &lt;<span class="hljs-keyword">view</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>&lt;/<span class="hljs-keyword">view</span>&gt;<br></code></pre></td></tr></table></figure><p>css部分<br>/* pages/my/version/version.wxss */</p><p>page {<br>background: #060700;<br>height: 100vh;<br>}<br>.drive,<br>.shadows {<br>background-color: rgb(0, 0, 0);<br>position: fixed;<br>top: 0;<br>right: 0;<br>bottom: 0;<br>left: 0;<br>}<br>.shadows text{<br>color: black;<br>font-size: 12px;<br>}<br>.drive view {</p><p>position: absolute;<br>left: 50%;<br>top: 50%;<br>border: 1px solid rgba(8, 61, 235, 0.993);<br>box-shadow: 0 4vw 8vw rgba(2, 203, 238, 0.582) inset;<br>width: 100vw;<br>height: 100vh;<br>animation: drive 10s linear infinite;<br>animation-direction: reverse;<br>}</p><p>.shadows view {<br>position: absolute;<br>left: 50%;<br>top: 50%;<br>background: rgb(34, 47, 224);<br>width: 100vw;<br>height: 100vh;<br>animation: shadows 10s linear infinite;<br>animation-direction: reverse;<br>}</p><p>.drive view:nth-child(1) {<br>animation-delay: 0;<br>}</p><p>.drive view:nth-child(2) {<br>animation-delay: -1s;<br>}</p><p>.drive view:nth-child(3) {<br>animation-delay: -2s;<br>}</p><p>.drive view:nth-child(4) {<br>animation-delay: -3s;<br>}</p><p>.drive view:nth-child(5) {<br>animation-delay: -4s;<br>}</p><p>.drive view:nth-child(6) {<br>animation-delay: -5s;<br>}</p><p>.drive view:nth-child(7) {<br>animation-delay: -6s;<br>}</p><p>.drive view:nth-child(8) {<br>animation-delay: -7s;<br>}</p><p>.drive view:nth-child(9) {<br>animation-delay: -8s;<br>}</p><p>.drive view:nth-child(10) {<br>animation-delay: -9s;<br>}</p><p>.shadows view:nth-child(1) {<br>animation-delay: 0;<br>}</p><p>.shadows view:nth-child(2) {<br>animation-delay: -1s;<br>}</p><p>.shadows view:nth-child(3) {<br>animation-delay: -2s;<br>}</p><p>.shadows view:nth-child(4) {<br>animation-delay: -3s;<br>}</p><p>.shadows view:nth-child(5) {<br>animation-delay: -4s;<br>}</p><p>.shadows view:nth-child(6) {<br>animation-delay: -5s;<br>}</p><p>.shadows view:nth-child(7) {<br>animation-delay: -6s;<br>}</p><p>.shadows view:nth-child(8) {<br>animation-delay: -7s;<br>}</p><p>.shadows view:nth-child(9) {<br>animation-delay: -8s;<br>}</p><p>.shadows view:nth-child(10) {<br>animation-delay: -9s;<br>}</p><p>@keyframes drive {<br>0% {<br>transform: translate(-50%, -50%) scale(1.05) rotate(0deg);<br>}<br>100% {<br>transform: translate(-50%, -50%) scale(0) rotate(-45deg);<br>}<br>}</p><p>@keyframes shadows {<br>0% {<br>transform: translate(-50%, -50%) scale(1.05) rotate(0deg);<br>opacity: 0;<br>}<br>100% {<br>transform: translate(-50%, -50%) scale(0) rotate(-45deg);<br>opacity: 0.25;<br>}<br>}</p><h1>小程序实现效果</h1><p><img src="http://jony-blog.oss-cn-beijing.aliyuncs.com/blog/WqGP8w.png" alt="WqGP8w"><br>可以改为html实现，原理是一样的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;小程序如何实现炫酷背景&lt;/h1&gt;
&lt;p&gt;该背景主要是通过css让多个元素在不同时间旋转来实现，再给元素加边框和阴影即可。&lt;/p&gt;
&lt;p&gt;该实例虽然是小程序的，但是依然可是在html中实现，只需要将view改为ul&amp;gt;li标签无序列表即可。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端开发" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="小程序开发" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="实战总结" scheme="http://yoursite.com/tags/%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>css3实现炫酷卡片反转</title>
    <link href="http://yoursite.com/2020/02/24/HC/csscard/"/>
    <id>http://yoursite.com/2020/02/24/HC/csscard/</id>
    <published>2020-02-24T15:02:15.000Z</published>
    <updated>2020-03-29T06:11:46.523Z</updated>
    
    <content type="html"><![CDATA[<h1>css3实现流星雨动画</h1><a id="more"></a><h2 id="css3实现卡片动画">css3实现卡片动画</h2><p>超文本部分</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cos">&lt;!--背景的源码--&gt;<br>&lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"night"</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"shooting_star"</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"shooting_star"</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"shooting_star"</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"shooting_star"</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"shooting_star"</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"shooting_star"</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"shooting_star"</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"shooting_star"</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"shooting_star"</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"shooting_star"</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"shooting_star"</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"shooting_star"</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"shooting_star"</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"shooting_star"</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"shooting_star"</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"shooting_star"</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"shooting_star"</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"shooting_star"</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"shooting_star"</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"shooting_star"</span>&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br><br><span class="hljs-comment">//卡片部分的源码</span><br>  &lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"card"</span>&gt;<br>    &lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"all"</span>&gt;<br>      &lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"center"</span>&gt;<br>        &lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"explainer"</span>&gt;<br>          &lt;span&gt;戳我一下&lt;/span&gt;<br>        &lt;/<span class="hljs-keyword">view</span>&gt;<br>        &lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">"text"</span>&gt;交个朋友吧：<br>        &lt;!-- &lt;<span class="hljs-keyword">view</span>&gt;blog:💻Jony.city&lt;/<span class="hljs-keyword">view</span>&gt; --&gt;<br>        &lt;<span class="hljs-keyword">view</span>&gt;QQ:😝<span class="hljs-number">1070474647</span>&lt;/<span class="hljs-keyword">view</span>&gt;<br>        &lt;<span class="hljs-keyword">view</span>&gt;Weibo:🔍Jony呗&lt;/<span class="hljs-keyword">view</span>&gt;<br>        &lt;<span class="hljs-keyword">view</span>&gt;GitHub：🐱JonyGot&lt;/<span class="hljs-keyword">view</span>&gt;<br>        &lt;/<span class="hljs-keyword">view</span>&gt;<br>      &lt;/<span class="hljs-keyword">view</span>&gt;<br>    &lt;/<span class="hljs-keyword">view</span>&gt;<br>  &lt;/<span class="hljs-keyword">view</span>&gt;<br><br><br>&lt;/<span class="hljs-keyword">view</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">css</span>部分<br><span class="hljs-selector-tag">page</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(ellipse at bottom, #<span class="hljs-number">1</span>b2735 <span class="hljs-number">0%</span>, #<span class="hljs-number">090</span>a0f <span class="hljs-number">100%</span>);<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;<br>  <span class="hljs-comment">/* overflow: hidden; */</span><br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">'Anton'</span>, sans-serif;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.night</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">rotateZ</span>(<span class="hljs-number">45deg</span>);<br>          <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateZ</span>(<span class="hljs-number">45deg</span>);<br>  <span class="hljs-comment">/* -webkit-animation: sky 200000ms linear infinite;</span><br><span class="hljs-comment">          animation: sky 200000ms linear infinite; */</span><br>&#125;<br><br><span class="hljs-selector-class">.shooting_star</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">2px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(-<span class="hljs-number">45deg</span>, #<span class="hljs-number">5</span>f91ff, rgba(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>));<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">999px</span>;<br>  <span class="hljs-attribute">-webkit-filter</span>: <span class="hljs-built_in">drop-shadow</span>(<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">6px</span> #<span class="hljs-number">699</span>bff);<br>          <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">drop-shadow</span>(<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">6px</span> #<span class="hljs-number">699</span>bff);<br>  <span class="hljs-attribute">-webkit-animation</span>: tail <span class="hljs-number">3000ms</span> ease-in-out infinite, shooting <span class="hljs-number">3000ms</span> ease-in-out infinite;<br>          <span class="hljs-attribute">animation</span>: tail <span class="hljs-number">3000ms</span> ease-in-out infinite, shooting <span class="hljs-number">3000ms</span> ease-in-out infinite;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">::before</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">''</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">1px</span>);<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">2px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(-<span class="hljs-number">45deg</span>, rgba(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), <span class="hljs-number">#5f91ff</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>));<br>  <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">50%</span>) <span class="hljs-built_in">rotateZ</span>(<span class="hljs-number">45deg</span>);<br>          <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">50%</span>) <span class="hljs-built_in">rotateZ</span>(<span class="hljs-number">45deg</span>);<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">-webkit-animation</span>: shining <span class="hljs-number">3000ms</span> ease-in-out infinite;<br>          <span class="hljs-attribute">animation</span>: shining <span class="hljs-number">3000ms</span> ease-in-out infinite;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">50%</span>) <span class="hljs-built_in">rotateZ</span>(-<span class="hljs-number">45deg</span>);<br>          <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">50%</span>) <span class="hljs-built_in">rotateZ</span>(-<span class="hljs-number">45deg</span>);<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(1)</span> &#123;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">185px</span>);<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">150px</span>);<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">8971ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">8971ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(1)</span><span class="hljs-selector-pseudo">::before</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(1)</span><span class="hljs-selector-pseudo">::after</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(1)</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">8971ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">8971ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(2)</span> &#123;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">50px</span>);<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">179px</span>);<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">9256ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">9256ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(2)</span><span class="hljs-selector-pseudo">::before</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(2)</span><span class="hljs-selector-pseudo">::after</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(2)</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">9256ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">9256ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(3)</span> &#123;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - -<span class="hljs-number">146px</span>);<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">135px</span>);<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">8700ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">8700ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(3)</span><span class="hljs-selector-pseudo">::before</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(3)</span><span class="hljs-selector-pseudo">::after</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(3)</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">8700ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">8700ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(4)</span> &#123;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - -<span class="hljs-number">77px</span>);<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">157px</span>);<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">3147ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">3147ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(4)</span><span class="hljs-selector-pseudo">::before</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(4)</span><span class="hljs-selector-pseudo">::after</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(4)</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">3147ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">3147ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(5)</span> &#123;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - -<span class="hljs-number">183px</span>);<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">8px</span>);<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">6588ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">6588ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(5)</span><span class="hljs-selector-pseudo">::before</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(5)</span><span class="hljs-selector-pseudo">::after</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(5)</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">6588ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">6588ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(6)</span> &#123;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - -<span class="hljs-number">29px</span>);<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">195px</span>);<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">8009ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">8009ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(6)</span><span class="hljs-selector-pseudo">::before</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(6)</span><span class="hljs-selector-pseudo">::after</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(6)</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">8009ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">8009ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(7)</span> &#123;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">95px</span>);<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">69px</span>);<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">5420ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">5420ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(7)</span><span class="hljs-selector-pseudo">::before</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(7)</span><span class="hljs-selector-pseudo">::after</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(7)</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">5420ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">5420ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(8)</span> &#123;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - -<span class="hljs-number">59px</span>);<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">70px</span>);<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">9378ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">9378ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(8)</span><span class="hljs-selector-pseudo">::before</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(8)</span><span class="hljs-selector-pseudo">::after</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(8)</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">9378ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">9378ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(9)</span> &#123;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">76px</span>);<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">238px</span>);<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">2845ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">2845ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(9)</span><span class="hljs-selector-pseudo">::before</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(9)</span><span class="hljs-selector-pseudo">::after</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(9)</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">2845ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">2845ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(10)</span> &#123;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">83px</span>);<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">6px</span>);<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">5205ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">5205ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(10)</span><span class="hljs-selector-pseudo">::before</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(10)</span><span class="hljs-selector-pseudo">::after</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(10)</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">5205ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">5205ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(11)</span> &#123;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - -<span class="hljs-number">137px</span>);<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">267px</span>);<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">808ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">808ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(11)</span><span class="hljs-selector-pseudo">::before</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(11)</span><span class="hljs-selector-pseudo">::after</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(11)</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">808ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">808ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(12)</span> &#123;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">12px</span>);<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">8px</span>);<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">2406ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">2406ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(12)</span><span class="hljs-selector-pseudo">::before</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(12)</span><span class="hljs-selector-pseudo">::after</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(12)</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">2406ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">2406ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(13)</span> &#123;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">148px</span>);<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">47px</span>);<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">7566ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">7566ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(13)</span><span class="hljs-selector-pseudo">::before</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(13)</span><span class="hljs-selector-pseudo">::after</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(13)</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">7566ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">7566ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(14)</span> &#123;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - -<span class="hljs-number">28px</span>);<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">75px</span>);<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">7634ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">7634ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(14)</span><span class="hljs-selector-pseudo">::before</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(14)</span><span class="hljs-selector-pseudo">::after</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(14)</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">7634ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">7634ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(15)</span> &#123;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - -<span class="hljs-number">37px</span>);<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">203px</span>);<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">7743ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">7743ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(15)</span><span class="hljs-selector-pseudo">::before</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(15)</span><span class="hljs-selector-pseudo">::after</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(15)</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">7743ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">7743ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(16)</span> &#123;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">41px</span>);<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">256px</span>);<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">2888ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">2888ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(16)</span><span class="hljs-selector-pseudo">::before</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(16)</span><span class="hljs-selector-pseudo">::after</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(16)</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">2888ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">2888ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(17)</span> &#123;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - -<span class="hljs-number">35px</span>);<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">121px</span>);<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">5864ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">5864ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(17)</span><span class="hljs-selector-pseudo">::before</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(17)</span><span class="hljs-selector-pseudo">::after</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(17)</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">5864ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">5864ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(18)</span> &#123;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">73px</span>);<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">225px</span>);<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">7883ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">7883ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(18)</span><span class="hljs-selector-pseudo">::before</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(18)</span><span class="hljs-selector-pseudo">::after</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(18)</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">7883ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">7883ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(19)</span> &#123;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - -<span class="hljs-number">69px</span>);<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">47px</span>);<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">3339ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">3339ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(19)</span><span class="hljs-selector-pseudo">::before</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(19)</span><span class="hljs-selector-pseudo">::after</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(19)</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">3339ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">3339ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(20)</span> &#123;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">162px</span>);<br>  <span class="hljs-attribute">left</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">50%</span> - <span class="hljs-number">129px</span>);<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">7963ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">7963ms</span>;<br>&#125;<br><span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(20)</span><span class="hljs-selector-pseudo">::before</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(20)</span><span class="hljs-selector-pseudo">::after</span>, <span class="hljs-selector-class">.shooting_star</span><span class="hljs-selector-pseudo">:nth-child(20)</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">-webkit-animation-delay</span>: <span class="hljs-number">7963ms</span>;<br>          <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">7963ms</span>;<br>&#125;<br><br><span class="hljs-keyword">@-webkit-keyframes</span> tail &#123;<br>  0% &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>  &#125;<br>  30% &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  &#125;<br>  100% &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> tail &#123;<br>  0% &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>  &#125;<br>  30% &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  &#125;<br>  100% &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">@-webkit-keyframes</span> shining &#123;<br>  0% &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>  &#125;<br>  50% &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">30px</span>;<br>  &#125;<br>  100% &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">@keyframes</span> shining &#123;<br>  0% &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>  &#125;<br>  50% &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">30px</span>;<br>  &#125;<br>  100% &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">@-webkit-keyframes</span> shooting &#123;<br>  0% &#123;<br>    <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">0</span>);<br>            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  100% &#123;<br>    <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">300px</span>);<br>            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">300px</span>);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">@keyframes</span> shooting &#123;<br>  0% &#123;<br>    <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">0</span>);<br>            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  100% &#123;<br>    <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">300px</span>);<br>            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">300px</span>);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">@-webkit-keyframes</span> sky &#123;<br>  0% &#123;<br>    <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">45deg</span>);<br>            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">45deg</span>);<br>  &#125;<br>  100% &#123;<br>    <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">405deg</span>);<br>            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">405deg</span>);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">@keyframes</span> sky &#123;<br>  0% &#123;<br>    <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">45deg</span>);<br>            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">45deg</span>);<br>  &#125;<br>  100% &#123;<br>    <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">405deg</span>);<br>            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">405deg</span>);<br>  &#125;<br>&#125;<br><br><br><span class="hljs-comment">/* 试试水 */</span><br><span class="hljs-selector-class">.card</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">'Raleway'</span>, sans-serif;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">radial-gradient</span>(circle at center, #<span class="hljs-number">899</span>Dc4, #<span class="hljs-number">495</span>D84);<br>  <span class="hljs-attribute">background-size</span>: cover;<br>  <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(ellipse at bottom, #<span class="hljs-number">1</span>b2735, #<span class="hljs-number">090</span>a0f);<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">300</span>;<br>&#125;<br><br><span class="hljs-selector-class">.all</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">-webkit-perspective</span>: <span class="hljs-number">10px</span>;<br>          <span class="hljs-attribute">perspective</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">perspective</span>(<span class="hljs-number">300px</span>) <span class="hljs-built_in">rotateX</span>(<span class="hljs-number">20deg</span>);<br>          <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">perspective</span>(<span class="hljs-number">300px</span>) <span class="hljs-built_in">rotateX</span>(<span class="hljs-number">20deg</span>);<br>  <span class="hljs-attribute">will-change</span>: perspective;<br>  <span class="hljs-attribute">-webkit-perspective-origin</span>: center center;<br>          <span class="hljs-attribute">perspective-origin</span>: center center;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1.3s</span> ease-out;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">-webkit-transform-style</span>: preserve-<span class="hljs-number">3</span>d;<br>          <span class="hljs-attribute">transform-style</span>: preserve-<span class="hljs-number">3</span>d;<br>&#125;<br><br><span class="hljs-selector-class">.all</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">-webkit-perspective</span>: <span class="hljs-number">1000px</span>;<br>          <span class="hljs-attribute">perspective</span>: <span class="hljs-number">1000px</span>;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">1.3s</span> ease-in;<br>  <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">perspective</span>(<span class="hljs-number">10000px</span>) <span class="hljs-built_in">rotateX</span>(<span class="hljs-number">0deg</span>);<br>          <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">perspective</span>(<span class="hljs-number">10000px</span>) <span class="hljs-built_in">rotateX</span>(<span class="hljs-number">0deg</span>);<br>&#125;<br><span class="hljs-selector-class">.all</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.text</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-selector-class">.all</span><span class="hljs-selector-pseudo">:hover</span> &gt; <span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">transition-delay</span>: <span class="hljs-number">0s</span>;<br>&#125;<br><span class="hljs-selector-class">.all</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.explainer</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br> <span class="hljs-selector-class">.center</span>&#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;<br>  <span class="hljs-attribute">-webkit-transform-style</span>: preserve-<span class="hljs-number">3</span>d;<br>          <span class="hljs-attribute">transform-style</span>: preserve-<span class="hljs-number">3</span>d;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-built_in">rgb</span>(<span class="hljs-number">252</span>, <span class="hljs-number">205</span>, <span class="hljs-number">78</span>);<br>  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">20px</span> <span class="hljs-number">5px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.4</span>);<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">transition</span>: all .<span class="hljs-number">3s</span> ease;<br>  <span class="hljs-attribute">transition-delay</span>: <span class="hljs-number">1s</span>;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">background-position</span>: center center;<br>  <span class="hljs-attribute">background-size</span>: contain;<br>  <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">34</span>, <span class="hljs-number">58</span>, <span class="hljs-number">99</span>);<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>  <span class="hljs-attribute">background-blend-mode</span>: color-burn;<br>&#125;<br> <span class="hljs-selector-class">.center</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-comment">/* box-shadow: 0 0 30px 10px rgba(100, 100, 255, 0.6); */</span><br>   <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">30px</span> <span class="hljs-number">10px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">71</span>, <span class="hljs-number">240</span>, <span class="hljs-number">20</span>, <span class="hljs-number">0.6</span>);<br>   <span class="hljs-comment">/* background-image: url(cloud://showquan-mn2sh.7368-showquan-mn2sh-1301439647/WechatIMG19.jpeg); */</span><br>  <span class="hljs-comment">/* background-color: #ccf; */</span><br>&#125;<br><br><span class="hljs-selector-class">.text</span> &#123;<br>  <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">30px</span>);<br>          <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">30px</span>);<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">transition</span>: all .<span class="hljs-number">3s</span> ease;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">will-change</span>: transform;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">252</span>, <span class="hljs-number">205</span>, <span class="hljs-number">78</span>);<br>  <span class="hljs-attribute">margin-top</span>:-<span class="hljs-number">50px</span>; <br>  <span class="hljs-comment">/* text-shadow: 0 0 5px rgba(100, 100, 255, 0.6); */</span><br>&#125;<br><br><span class="hljs-selector-class">.lefter</span> &#123;<br>  <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">60px</span>) <span class="hljs-built_in">translateZ</span>(-<span class="hljs-number">50px</span>) <span class="hljs-built_in">rotateY</span>(-<span class="hljs-number">10deg</span>);<br>          <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">60px</span>) <span class="hljs-built_in">translateZ</span>(-<span class="hljs-number">50px</span>) <span class="hljs-built_in">rotateY</span>(-<span class="hljs-number">10deg</span>);<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(img/organization-<span class="hljs-number">512</span>.png);<br>&#125;<br><br><span class="hljs-selector-class">.left</span> &#123;<br>  <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">30px</span>) <span class="hljs-built_in">translateZ</span>(-<span class="hljs-number">25px</span>) <span class="hljs-built_in">rotateY</span>(-<span class="hljs-number">5deg</span>);<br>          <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">30px</span>) <span class="hljs-built_in">translateZ</span>(-<span class="hljs-number">25px</span>) <span class="hljs-built_in">rotateY</span>(-<span class="hljs-number">5deg</span>);<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(img/creative_draw-<span class="hljs-number">512</span>.png);<br>&#125;<br><br><span class="hljs-selector-class">.center</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">rotateZ</span>(-<span class="hljs-number">45deg</span>);<br>          <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateZ</span>(-<span class="hljs-number">45deg</span>);<br>&#125;<br><br><span class="hljs-selector-class">.right</span> &#123;<br>  <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">30px</span>) <span class="hljs-built_in">translateZ</span>(-<span class="hljs-number">25px</span>) <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">5deg</span>);<br>          <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">30px</span>) <span class="hljs-built_in">translateZ</span>(-<span class="hljs-number">25px</span>) <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">5deg</span>);<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(img/cloud_weather-<span class="hljs-number">512</span>.png);<br>&#125;<br><br><span class="hljs-selector-class">.righter</span> &#123;<br>  <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">60px</span>) <span class="hljs-built_in">translateZ</span>(-<span class="hljs-number">50px</span>) <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">10deg</span>);<br>          <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">60px</span>) <span class="hljs-built_in">translateZ</span>(-<span class="hljs-number">50px</span>) <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">10deg</span>);<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(img/search-<span class="hljs-number">512</span>.png);<br>&#125;<br><br><span class="hljs-selector-class">.explainer</span> &#123;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">300</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2rem</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">252</span>, <span class="hljs-number">205</span>, <span class="hljs-number">78</span>);<br>  <span class="hljs-attribute">transition</span>: all .<span class="hljs-number">6s</span> ease;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#303050</span>;<br>  <span class="hljs-comment">/* background-image: radial-gradient(circle at center top, #cce, #33a); */</span><br>  <span class="hljs-attribute">background-image</span>: <br>  <span class="hljs-built_in">radial-gradient</span>(circle at center top, rgb(<span class="hljs-number">99</span>, <span class="hljs-number">100</span>, <span class="hljs-number">105</span>), <span class="hljs-built_in">rgb</span>(<span class="hljs-number">14</span>, <span class="hljs-number">14</span>, <span class="hljs-number">80</span>));<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.8</span>);<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.ref</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#000</span>;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(to bottom, #d80, #c00);<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">3px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">7px</span> <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">text-decoration</span>: none;<br>  <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">3px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.4</span>);<br>&#125;<br><span class="hljs-selector-class">.ref</span><span class="hljs-selector-pseudo">::first-letter</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1>点击前效果</h1><p>（颜色显示有点不正常，图床上传处理原因）<br><img src="http://jony-blog.oss-cn-beijing.aliyuncs.com/blog/1oRsnv.png" alt="1oRsnv"></p><h1>点击后效果（动画打开）</h1><p><img src="http://jony-blog.oss-cn-beijing.aliyuncs.com/blog/1QCzP7.png" alt="1QCzP7"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;css3实现流星雨动画&lt;/h1&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端开发" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="小程序开发" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="实战总结" scheme="http://yoursite.com/tags/%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>javaScript闭包理解</title>
    <link href="http://yoursite.com/2020/02/24/js/js-bibao/"/>
    <id>http://yoursite.com/2020/02/24/js/js-bibao/</id>
    <published>2020-02-24T12:53:24.000Z</published>
    <updated>2020-03-29T06:10:33.651Z</updated>
    
    <content type="html"><![CDATA[<h1>闭包</h1><p>JavaScript 变量可以是局部变量或全局变量。私有变量可以用到闭包。</p><h2 id="一个变量的生命周期">一个变量的生命周期</h2><p>这里需要引入一个概念就是变量的生命周期，在【let,const,var】那片文章中有提到这个概念，全局变量的作用域是全局性的，即在整个JavaScript程序中，全局变量处处都在。而在函数内部声明的变量，只在函数内部起作用。这些变量是局部变量，作用域是局部性的；函数的参数也是局部性的，只在函数内部起作用。</p><h2 id="计数器困境">计数器困境</h2><p>如果想统计一些数值，且该计数器在所有函数中都是可用的。你可以使用全局变量，函数设置计数器递增：</p><a id="more"></a><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">var counter = <span class="hljs-number">0</span>;<br> <br>function <span class="hljs-keyword">add</span><span class="bash">() &#123;</span><br>   return counter += <span class="hljs-number">1</span>;<br>&#125;<br> <br><span class="hljs-keyword">add</span><span class="bash">();</span><br><span class="hljs-keyword">add</span><span class="bash">();</span><br><span class="hljs-keyword">add</span><span class="bash">();</span><br></code></pre></td></tr></table></figure><p>但是这样做的，页面内所有的方法或者脚本都可以访问这个变量并给他赋值。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">function <span class="hljs-keyword">add</span><span class="bash">() &#123;</span><br>    var counter = <span class="hljs-number">0</span>;<br>    return counter += <span class="hljs-number">1</span>;<br>&#125;<br> <br><span class="hljs-keyword">add</span><span class="bash">();</span><br><span class="hljs-keyword">add</span><span class="bash">();</span><br><span class="hljs-keyword">add</span><span class="bash">();</span><br></code></pre></td></tr></table></figure><p>而如果在函数内部定义这个变量，每次执行函数的时候，这个变量都会被重新创建赋值，所以每次还是从0开始递增一位，也就是1.</p><h2 id="JavaScript-内嵌函数">JavaScript 内嵌函数</h2><p>所有函数都能访问全局变量。 在 JavaScript 中，所有函数都能访问它们上一层的作用域。JavaScript 支持嵌套函数。嵌套函数可以访问上一层的函数变量。<br>例如：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> counter = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">plus</span><span class="hljs-params">()</span> </span>&#123;counter += <span class="hljs-number">1</span>;&#125;<br>    plus();    <br>    <span class="hljs-keyword">return</span> counter; <br>&#125;<br></code></pre></td></tr></table></figure><p>该实例中，内嵌函数 plus() 可以访问父函数的 counter 变量：</p><p>但是如果我们能在外部访问 plus() 函数，这样就能解决计数器的困境。我们同样需要确保 counter = 0 只执行一次。<br>我们需要闭包。</p><h2 id="具体解读">具体解读</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> add = (<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//匿名函数</span><br>    <span class="hljs-keyword">var</span> counter = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> counter += <span class="hljs-number">1</span>;&#125;<span class="hljs-comment">//返回一个函数</span><br>&#125;)();<span class="hljs-comment">//注意后面多了（），自调用的写法</span><br> <br>add();<br>add();<br>add();<br></code></pre></td></tr></table></figure><p>可以看到，该函数进行了一次自调用，自调用函数会自己调用。<br>代码解读：</p><ul><li>代码运行的时候，不是先执行add()来调用函数，而是先让匿名函数函数自调用一次。</li><li>匿名函数运行定义一个变量count</li><li>然后返回function () {return counter += 1;}这个函数</li><li>让add变量成为这个函数，这样add变量就是返回的那个函数，而不是定义的那个匿名函数</li><li>运行add()实际运行的是返回的那个函数也就是return counter += 1;</li></ul><p>这样的操作就是闭包，让外部的函数可以通过返回的那个函数访问计数器counter，而计数器又受匿名函数的作用域保护，只能通过 add 方法修改。</p><h1>以上</h1><p>闭包衡量你对这门语言的熟悉程度，以及是否知道何时使用闭包。闭包的本质是一个内部函数访问其作用域之外的变量。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;闭包&lt;/h1&gt;
&lt;p&gt;JavaScript 变量可以是局部变量或全局变量。私有变量可以用到闭包。&lt;/p&gt;
&lt;h2 id=&quot;一个变量的生命周期&quot;&gt;一个变量的生命周期&lt;/h2&gt;
&lt;p&gt;这里需要引入一个概念就是变量的生命周期，在【let,const,var】那片文章中有提到这个概念，全局变量的作用域是全局性的，即在整个JavaScript程序中，全局变量处处都在。而在函数内部声明的变量，只在函数内部起作用。这些变量是局部变量，作用域是局部性的；函数的参数也是局部性的，只在函数内部起作用。&lt;/p&gt;
&lt;h2 id=&quot;计数器困境&quot;&gt;计数器困境&lt;/h2&gt;
&lt;p&gt;如果想统计一些数值，且该计数器在所有函数中都是可用的。你可以使用全局变量，函数设置计数器递增：&lt;/p&gt;
    
    </summary>
    
    
      <category term="javaScript" scheme="http://yoursite.com/categories/javaScript/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="javaScript技巧" scheme="http://yoursite.com/tags/javaScript%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>var、let、const的对比</title>
    <link href="http://yoursite.com/2020/02/24/js/js-varlet/"/>
    <id>http://yoursite.com/2020/02/24/js/js-varlet/</id>
    <published>2020-02-24T12:03:24.000Z</published>
    <updated>2020-03-29T06:11:24.830Z</updated>
    
    <content type="html"><![CDATA[<h1>前言</h1><p>在js开发中，经常会用这三个属性来声明变量，但是自己对他们的知识还处于模棱两可的状态，今天抽时间学习了一下。</p><h1>对比</h1><ol><li>var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。</li><li>let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。</li><li>const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。</li></ol><a id="more"></a><h2 id="是否会挂载到windows">是否会挂载到windows</h2><p>var声明的变量会挂载在window上，而let和const声明的变量不会</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span>;<br><span class="hljs-built_in">console</span>.log(a,<span class="hljs-built_in">window</span>.a);    <span class="hljs-comment">// 100 100</span><br><br><span class="hljs-keyword">let</span> b = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">console</span>.log(b,<span class="hljs-built_in">window</span>.b);    <span class="hljs-comment">// 10 undefined</span><br><br><span class="hljs-keyword">const</span> c = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">console</span>.log(c,<span class="hljs-built_in">window</span>.c);    <span class="hljs-comment">// 1 undefined</span><br></code></pre></td></tr></table></figure><h2 id="是否存在变量提升">是否存在变量提升</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">console</span>.log(a); <span class="hljs-regexp">//</span> <span class="hljs-literal">undefined</span>  ==<span class="hljs-function">=&gt;</span>  a已声明还没赋值，默认得到<span class="hljs-literal">undefined</span>值<br>var a = <span class="hljs-number">100</span>;<br><span class="hljs-built_in">console</span>.log(b); <span class="hljs-regexp">//</span> 报错：b <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> defined  ==<span class="hljs-function">=&gt;</span> 找不到b这个变量<br>let b = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">console</span>.log(c); <span class="hljs-regexp">//</span> 报错：c <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> defined  ==<span class="hljs-function">=&gt;</span> 找不到c这个变量<br>const c = <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><h2 id="let和const声明形成块作用域">let和const声明形成块作用域</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">let</span> b = <span class="hljs-number">10</span>;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// 100</span><br><span class="hljs-built_in">console</span>.log(b)  <span class="hljs-comment">// 报错：b is not defined  ===&gt; 找不到b这个变量</span><br></code></pre></td></tr></table></figure><p>const</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>)&#123;<br><br>    var a = <span class="hljs-number">100</span>;<br>        <br>    <span class="hljs-keyword">const</span> c = <span class="hljs-number">1</span>;<br>&#125;<br> console.log(a); <span class="hljs-comment">// 100</span><br> console.log(c)  <span class="hljs-comment">// 报错：c is not defined  ===&gt; 找不到c这个变量</span><br></code></pre></td></tr></table></figure><h2 id="同一作用域下let和const不能声明同名变量，而var可以">同一作用域下let和const不能声明同名变量，而var可以</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span>;<br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// 100</span><br><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// 10</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">//  控制台报错：Identifier 'a' has already been declared  ===&gt; 标识符a已经被声明了。</span><br></code></pre></td></tr></table></figure><h2 id="暂存死区">暂存死区</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">var a = <span class="hljs-number">100</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>)&#123;<br>    a = <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">//在当前块作用域中存在a使用let/const声明的情况下，给a赋值10时，只会在当前作用域找变量a，</span><br>    <span class="hljs-comment">// 而这时，还未到声明时候，所以控制台Error:a is not defined</span><br>    let a = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="const">const</h2><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 　　1、一旦声明必须赋值,不能使用null占位。</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* 　　2、声明后不能再修改</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* 　　3、如果声明的是复合类型数据，可以修改其属性</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* */</span><br><br><span class="hljs-keyword">const</span> a = <span class="hljs-number">100</span>; <br><br><span class="hljs-keyword">const</span> <span class="hljs-built_in">list</span> = [];<br><span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">list</span>);　　<span class="hljs-comment">// [10]</span><br><br><span class="hljs-keyword">const</span> obj = &#123;<span class="hljs-attribute">a</span>:<span class="hljs-number">100</span>&#125;;<br>obj.name = <span class="hljs-string">'apple'</span>;<br>obj.a = <span class="hljs-number">10000</span>;<br><span class="hljs-built_in">console</span>.log(obj);　　<span class="hljs-comment">// &#123;a:10000,name:'apple'&#125;</span><br></code></pre></td></tr></table></figure><h2 id="让我简单告诉你-简而言之">让我简单告诉你-简而言之</h2><div class="note danger"><p>let定义的变量只在块中生效，出了代码块就不可以了<br>  const定义的变量从定义的时候就必须得给他赋值，定义以后不能再改变<br> var定义的变量可以垮块访问。</p></div># 参考文献<p><a href="https://www.cnblogs.com/zhaoxiaoying/p/9031890.html" target="_blank" rel="noopener">var与let、const的区别</a><br><a href="https://www.bbsmax.com/A/QW5YWDlGzm/" target="_blank" rel="noopener">let、var、const</a><br><a href="https://www.bbsmax.com/A/Vx5MBoR9dN/" target="_blank" rel="noopener">小程序中三种变量申明区别</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;在js开发中，经常会用这三个属性来声明变量，但是自己对他们的知识还处于模棱两可的状态，今天抽时间学习了一下。&lt;/p&gt;
&lt;h1&gt;对比&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。&lt;/li&gt;
&lt;li&gt;let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。&lt;/li&gt;
&lt;li&gt;const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="javaScript" scheme="http://yoursite.com/categories/javaScript/"/>
    
    
      <category term="前端开发" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>小程序发布及上线</title>
    <link href="http://yoursite.com/2020/02/23/wx/wx-bushu/"/>
    <id>http://yoursite.com/2020/02/23/wx/wx-bushu/</id>
    <published>2020-02-23T15:34:26.000Z</published>
    <updated>2020-03-29T06:13:54.489Z</updated>
    
    <content type="html"><![CDATA[<h1>发布前准备</h1><p>小程序发布之前，开发者首先需要在自己的移动终端上预览确保没有任何的问 题，当确认无误时，上传代码到小程序的管理后台，并设置版本，具体操作:</p><a id="more"></a><h2 id="预览">预览</h2><p>点击开发者工具顶部操作栏的预览按钮，开发者工具会自动打包当前项目，并 上传小程序代码至微信的服务器，成功之后会在界面上显示一个二维码。使用当前 小程序开发者的微信扫码即可看到小程序在手机客户端上的真实表现。</p><h2 id="上传代码">上传代码</h2><p>点击开发者工具顶部操作栏的上传按钮，填写版本号以及项目备注，需要注意 的是，这里版本号以及项目备注是为了方便管理员检查版本使用的，开发者可以根 据自己的实际要求来填写这两个字段。<br>上传成功之后，登录小程序管理后台 - 开发管理 - 开发版本 就可以找到刚提 交上传的版本了。</p><h2 id="可以将这个版本设置“体验版”-或者“提交审核”。">可以将这个版本设置“体验版” 或者“提交审核”。</h2><blockquote><p>小程序版本</p></blockquote><table><thead><tr><th>版   本</th><th>说明</th></tr></thead><tbody><tr><td>开发版本</td><td>使用开发者工具，可将代码上传到开发版本中。开发版本只保留每人最新的一份上传的代码。点击提交审核，可将代码提交审核。开发版本可删除，不 影响线上版本和审核中版本的代码。</td></tr><tr><td>审核中版 本</td><td>只能有一份代码处于审核中。有审核结果后可以发布到线上，也可直接重新 提交审核，覆盖原审核版本。</td></tr><tr><td>线上版本</td><td>线上所有用户使用的代码版本，该版本代码在新版本代码发布后被覆盖更新。</td></tr></tbody></table><h1>小程序上线</h1><p>当小程序开发完成时提交审核，等待微信管理员审核通过后，发布后成为线上版本，即完成小程序的发布，开发者可以随时查看运营数据的情况。步骤如下:</p><h2 id="提交审核">提交审核</h2><ol><li>为了保证小程序的质量，以及符合相关的规范，小程序的发布是需要经过审核的。在开发者工具中上传了小程序代码之后，登录小程序管理后台- 开发管理 - 开发版本，找到提交上传的版本。</li><li>在开发版本的列表中，点击提交审核，按照页面提示，填写相关的信息，即可 以将小程序提交审核。</li><li>需要注意的是，开发者需要严格测试了版本之后，再提交审核，过多的审核不通过，可能会影响后续的时间。<br><img src="http://jony-blog.oss-cn-beijing.aliyuncs.com/blog/gZF00R.png" alt="gZF00R"></li></ol><h2 id="发布">发布</h2><p>审核通过之后，管理员的微信中会收到小程序通过审核的通知，此时登录小程序管理后台- 开发管理 -审核版本中可以看到通过审核的版本。 选择点击发布，即可发布小程序。</p><center><img src="http://jony-blog.oss-cn-beijing.aliyuncs.com/blog/gh_0785db6f1e67_344.jpg"></img></center>  <center><h1>通过扫码查看作者最新发布的小程序。</h1></center>  ]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;发布前准备&lt;/h1&gt;
&lt;p&gt;小程序发布之前，开发者首先需要在自己的移动终端上预览确保没有任何的问 题，当确认无误时，上传代码到小程序的管理后台，并设置版本，具体操作:&lt;/p&gt;
    
    </summary>
    
    
      <category term="小程序开发" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="小程序开发" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="实战总结" scheme="http://yoursite.com/tags/%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>tip-微信跳转第三方小程序</title>
    <link href="http://yoursite.com/2020/02/21/tip/tip-xcxtz/"/>
    <id>http://yoursite.com/2020/02/21/tip/tip-xcxtz/</id>
    <published>2020-02-21T15:02:34.000Z</published>
    <updated>2020-03-29T06:13:42.743Z</updated>
    
    <content type="html"><![CDATA[<h1>微信如何跳转第三方小程序</h1><h2 id="首先设置app-json">首先设置app.json</h2><p>这个一定不要忘了，当时我设置就是忘了这个，浪费了很多时间。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">"navigateToMiniProgramAppIdList"</span>: [<br>    <span class="hljs-string">"wx32540bd863b27570"</span><br>],<br></code></pre></td></tr></table></figure><a id="more"></a><h2 id="在js界面设置跳转函数">在js界面设置跳转函数</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs 1c">wx.navigateToMiniProgram(&#123;<br>  appId: 'wx<span class="hljs-number">3254</span>0bd863b<span class="hljs-number">2757</span>0',<span class="hljs-comment">//这个是跳转拼多多的</span><br>  path: that.data.mobilUrl,<br>  success(res) &#123;<br>    console.<span class="hljs-built_in">log</span>(<span class="hljs-string">"我已经到达PDD了"</span>)<br>  &#125;,<br>  fail(err) &#123;<br>    <span class="hljs-comment">// 打开失败</span><br>    console.<span class="hljs-built_in">log</span>(err)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>很早以前小程序跳转需要绑定公众号才可以，很麻烦，但是2018年微信发出一个公告，可以不用绑定了，确实方便了很多。<br><img src="http://jony-blog.oss-cn-beijing.aliyuncs.com/blog/EcVWHC.png" alt="小程序跳转"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;微信如何跳转第三方小程序&lt;/h1&gt;
&lt;h2 id=&quot;首先设置app-json&quot;&gt;首先设置app.json&lt;/h2&gt;
&lt;p&gt;这个一定不要忘了，当时我设置就是忘了这个，浪费了很多时间。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs js&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;navigateToMiniProgramAppIdList&quot;&lt;/span&gt;: [&lt;br&gt;    &lt;span class=&quot;hljs-string&quot;&gt;&quot;wx32540bd863b27570&quot;&lt;/span&gt;&lt;br&gt;],&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="避坑指南" scheme="http://yoursite.com/categories/%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="小程序开发" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="避坑指南" scheme="http://yoursite.com/tags/%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>PHP-MVC开发</title>
    <link href="http://yoursite.com/2020/02/14/php/php-MVC/"/>
    <id>http://yoursite.com/2020/02/14/php/php-MVC/</id>
    <published>2020-02-14T11:02:13.000Z</published>
    <updated>2020-03-29T05:45:09.745Z</updated>
    
    <content type="html"><![CDATA[<h1>PHP如何高效开发小程序API接口</h1><h2 id="thinkPHP">thinkPHP</h2><h3 id="百度百科对thinkPHP介绍：">百度百科对thinkPHP介绍：</h3><p>ThinkPHP是为了简化企业级应用开发和敏捷WEB应用开发而诞生的。最早诞生于2006年初，2007年元旦正式更名为ThinkPHP，并且遵循Apache2开源协议发布。ThinkPHP从诞生以来一直秉承简洁实用的设计原则，在保持出色的性能和至简的代码的同时，也注重易用性。并且拥有众多原创功能和特性，在社区团队的积极参与下，在易用性、扩展性和性能方面不断优化和改进。<br>ThinkPHP是一个快速、兼容而且简单的轻量级国产PHP开发框架，诞生于2006年初，原名FCS，2007年元旦正式更名为ThinkPHP，遵循Apache2开源协议发布，从Struts结构移植过来并做了改进和完善，同时也借鉴了国外很多优秀的框架和模式，使用面向对象的开发结构和MVC模式，融合了Struts的思想和TagLib（标签库）、RoR的ORM映射和ActiveRecord模式。<br>ThinkPHP可以支持windows/Unix/Linux等服务器环境，正式版需要PHP5.0以上版本支持，支持MySql、PgSQL、Sqlite多种数据库以及PDO扩展，ThinkPHP框架本身没有什么特别模块要求，具体的应用系统运行环境要求视开发所涉及的模块。<br>作为一个整体开发解决方案，ThinkPHP能够解决应用开发中的大多数需要，因为其自身包含了底层架构、兼容处理、基类库、数据库访问层、模板引擎、缓存机制、插件机制、角色认证、表单处理等常用的组件，并且对于跨版本、跨平台和跨数据库移植都比较方便。并且每个组件都是精心设计和完善的，应用开发过程仅仅需要关注您的业务逻辑。</p><a id="more"></a><h3 id="个人理解：">个人理解：</h3><p>相较于原生PHP，thinkPHP封装了很多常用的方法，这就使我们在开发中更便携的使用PHP处理任务，比如thinkPHP将常用的SQL语句进行封装，直接调用数据库操作方法就可以。并且将传统PHP的web开发进行面向对象思想的处理，将网站的用户操作与后台对用户操作的处理(包含操作数据库)进行一种分离的思想。</p><h2 id="MVC">MVC</h2><blockquote><p>M：(module)模型:主要用于操作相应的数据表(表对应的类goods.class.php、category.class.php、user.class.php)</p></blockquote><blockquote><p>V：(view)视图:就是用于承载php回显数据的html文档</p></blockquote><blockquote><p>C：(controller)控制器:主要用于业务逻辑的处理，控制程序流程的走向</p></blockquote><p>thinkPHP是基于mvc方式来组织代码的，mvc是一种人为的划分应用开发流程的方式，使我们的开发工作更加的高效。使用mvc开发的应用程序，都会包含三个核心的部件，他们分别是模型，视图，控制器，他们各自有各自的任务，其中模型简称为model单词的首字母，视图简称为v，它是英文单词view的首字母，控制器简称为c，它是英文单词controller的首字母。<br>传统的web应用，它将数据处理和数据展示，也就是说模型和视图是直接写到了一个脚本里，视图直接从模型中获取数据并显示代码呢，维护非常的复杂，开发效率比较低，那么当我们采用mvc开发，首先，还是有两个核心部分，模型负责数据处理，而是视图负责数据显示，换句话说，他们之间已经不存在数据交换了，模型和视图之间，他们现在的数据交换是通过一个叫做控制器的部件来完成，控制器首先从模型中获取数据，然后根据数据的格式或者类型或者要求，再选择一个合适的视图来进行显示，这样就做到了模型和视图的完全分离的模型，一个是他们不在直接通信，也不存在数据交换，让控制器来统一协调这一切，完成数据的获取和数据处理。<br><img src="http://jony-blog.oss-cn-beijing.aliyuncs.com/blog/QONost.png" alt="QONost"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;PHP如何高效开发小程序API接口&lt;/h1&gt;
&lt;h2 id=&quot;thinkPHP&quot;&gt;thinkPHP&lt;/h2&gt;
&lt;h3 id=&quot;百度百科对thinkPHP介绍：&quot;&gt;百度百科对thinkPHP介绍：&lt;/h3&gt;
&lt;p&gt;ThinkPHP是为了简化企业级应用开发和敏捷WEB应用开发而诞生的。最早诞生于2006年初，2007年元旦正式更名为ThinkPHP，并且遵循Apache2开源协议发布。ThinkPHP从诞生以来一直秉承简洁实用的设计原则，在保持出色的性能和至简的代码的同时，也注重易用性。并且拥有众多原创功能和特性，在社区团队的积极参与下，在易用性、扩展性和性能方面不断优化和改进。&lt;br&gt;
ThinkPHP是一个快速、兼容而且简单的轻量级国产PHP开发框架，诞生于2006年初，原名FCS，2007年元旦正式更名为ThinkPHP，遵循Apache2开源协议发布，从Struts结构移植过来并做了改进和完善，同时也借鉴了国外很多优秀的框架和模式，使用面向对象的开发结构和MVC模式，融合了Struts的思想和TagLib（标签库）、RoR的ORM映射和ActiveRecord模式。&lt;br&gt;
ThinkPHP可以支持windows/Unix/Linux等服务器环境，正式版需要PHP5.0以上版本支持，支持MySql、PgSQL、Sqlite多种数据库以及PDO扩展，ThinkPHP框架本身没有什么特别模块要求，具体的应用系统运行环境要求视开发所涉及的模块。&lt;br&gt;
作为一个整体开发解决方案，ThinkPHP能够解决应用开发中的大多数需要，因为其自身包含了底层架构、兼容处理、基类库、数据库访问层、模板引擎、缓存机制、插件机制、角色认证、表单处理等常用的组件，并且对于跨版本、跨平台和跨数据库移植都比较方便。并且每个组件都是精心设计和完善的，应用开发过程仅仅需要关注您的业务逻辑。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="小程序开发" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="PHP实战" scheme="http://yoursite.com/tags/PHP%E5%AE%9E%E6%88%98/"/>
    
      <category term="MVC" scheme="http://yoursite.com/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>事件冒泡和事件捕获</title>
    <link href="http://yoursite.com/2020/02/13/js/js-maopao/"/>
    <id>http://yoursite.com/2020/02/13/js/js-maopao/</id>
    <published>2020-02-13T15:13:24.000Z</published>
    <updated>2020-03-29T06:10:50.752Z</updated>
    
    <content type="html"><![CDATA[<h1>事件传递的两种方式：冒泡与捕获。</h1><h2 id="冒泡和排序对比">冒泡和排序对比</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;div&gt;</span><br>    <span class="hljs-section">&lt;p&gt;</span><span class="hljs-section">&lt;/p&gt;</span><br> <span class="hljs-section">&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><p>事件传递定义了元素事件触发的顺序。 例如上面的代码，如果点击P， 哪个元素的 “click” 事件先被触发。</p><table><thead><tr><th>事件</th><th>结果</th></tr></thead><tbody><tr><td>冒泡</td><td>内部元素的事件会先被触发，然后再触发外部元素，</td></tr><tr><td>捕获</td><td>外部元素的事件会先被触发，然后才会触发内部元素的事件</td></tr></tbody></table><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>div &#123;<br>    background-color: coral;<br>    border: 1px solid;<br>    padding: 50px;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>实例演示了在添加不同事件监听时，冒泡与捕获的不同。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"myDiv"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"myP"</span>&gt;</span>点击段落，我是冒泡。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"myDiv2"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"myP2"</span>&gt;</span>点击段落，我是捕获。 <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"myP"</span>).addEventListener(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="actionscript">    alert(<span class="hljs-string">"你点击了 P 元素!"</span>);</span><br><span class="actionscript">&#125;, <span class="hljs-literal">false</span>);</span><br><span class="javascript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"myDiv"</span>).addEventListener(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="actionscript">    alert(<span class="hljs-string">" 你点击了 DIV 元素 !"</span>);</span><br><span class="actionscript">&#125;, <span class="hljs-literal">false</span>);</span><br><span class="javascript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"myP2"</span>).addEventListener(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="actionscript">    alert(<span class="hljs-string">"你点击了 P2 元素!"</span>);</span><br><span class="actionscript">&#125;, <span class="hljs-literal">true</span>);</span><br><span class="javascript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"myDiv2"</span>).addEventListener(<span class="hljs-string">"click"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="actionscript">    alert(<span class="hljs-string">"你点击了 DIV2 元素 !"</span>);</span><br><span class="actionscript">&#125;, <span class="hljs-literal">true</span>);</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>点击第一个盒子的P文字，你会发现先触发</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">alert(<span class="hljs-string">"你点击了 P 元素!"</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>再触发</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">alert(<span class="hljs-string">" 你点击了 DIV 元素 !"</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>而捕获排序恰恰相反。</p><h2 id="事件代理机制">事件代理机制</h2><p>比如我们在列表中，我们想要在点击每个li标签时，弹出对应的函数。常规做法是遍历每个li,然后在每个li上绑定一个点击事件，这种做法在li较少的时候可以使用，但如果有很多歌li，那就会大大降低脚本运行的速度。这时就需要事件代理出场了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ul.addEventListener(<span class="hljs-string">'click'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;<br>            <span class="hljs-keyword">var</span> e=e||<span class="hljs-built_in">window</span>.event;<br>            <span class="hljs-keyword">if</span>(e.target.nodeName.toLowerCase()==<span class="hljs-string">'li'</span>)&#123;<br>                alert(e.target.innerHTML);<br>            &#125;<br><br>        &#125;,<span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><p>由于事件冒泡机制，点击了li后会冒泡到ul,此时就会触发绑定在div上的点击事件，再利用target找到事件实际发生的元素，就可以达到预期的效果。</p><h1>主要作用</h1><p>主要用在事件监听函数addEventListener()中，addEventListener()方法用于向指定元素添加事件句柄,使用该方法添加的事件不会覆盖已存在的事件。<br>使用监听函数的好处：</p><ol><li><p>可以向一个元素添加多个事件句柄。</p></li><li><p>可以向同个元素添加多个同类型的事件句柄，如：两个 “click” 事件。</p></li><li><p>可以向任何 DOM 对象添加事件监听，不仅仅是 HTML 元素。如： window 对象。</p></li><li><p>addEventListener() 方法可以更简单的控制事件（冒泡与捕获）。</p></li></ol><p>当你使用 addEventListener() 方法时, JavaScript 从 HTML 标记中分离开来，可读性更强，在没有控制HTML标记时也可以添加事件监听。可以使用 removeEventListener() 方法来移除事件的监听。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;事件传递的两种方式：冒泡与捕获。&lt;/h1&gt;
&lt;h2 id=&quot;冒泡和排序对比&quot;&gt;冒泡和排序对比&lt;/h2&gt;
&lt;figure class=&quot;highlight apache&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs apache&quot;&gt;&lt;span class=&quot;hljs-section&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;hljs-section&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-section&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt; &lt;span class=&quot;hljs-section&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;事件传递定义了元素事件触发的顺序。 例如上面的代码，如果点击P， 哪个元素的 “click” 事件先被触发。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;事件&lt;/th&gt;
&lt;th&gt;结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;冒泡&lt;/td&gt;
&lt;td&gt;内部元素的事件会先被触发，然后再触发外部元素，&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;捕获&lt;/td&gt;
&lt;td&gt;外部元素的事件会先被触发，然后才会触发内部元素的事件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="javaScript" scheme="http://yoursite.com/categories/javaScript/"/>
    
    
      <category term="前端开发" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="javaScript技巧" scheme="http://yoursite.com/tags/javaScript%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>小程序开发-注册</title>
    <link href="http://yoursite.com/2020/02/13/wx/wx-zhuce/"/>
    <id>http://yoursite.com/2020/02/13/wx/wx-zhuce/</id>
    <published>2020-02-13T07:34:13.000Z</published>
    <updated>2020-03-29T06:14:13.566Z</updated>
    
    <content type="html"><![CDATA[<h1>微信官方 UI 库 WeUI库的使用</h1><p>WeUI 是一套同微信原生视觉体验一致的基础样式库，由微信官方设计团队为 微信内网页和微信小程序量身设计，令用户的使用感知更加统一。包含 button、cell、 dialog、 progress、 toast、article、actionsheet、icon 等各式元素。WeUI 基础样式 库下载地址:<br><a href="https://github.com/Tencent/weui-wxss" target="_blank" rel="noopener">github-小程序WeUI样式库</a></p> <a id="more"></a> <p>开发者可以将样式库下载并使 用微信 web 开发者工具打开 dist 目录(请注意，是 dist 目录，不是整个项目)，导 入 dist 目录后，可以预览样式库<br><img src="http://jony-blog.oss-cn-beijing.aliyuncs.com/blog/z4iw2i.png" alt="z4iw2i"><br>可以在样式库里选择自己所需要的样式，然后直接将需要的样式的wxml复制黏贴至自己的项目中，然后将 WeUI 中 style 文件拷贝至自己的项目目录中.<br><img src="http://jony-blog.oss-cn-beijing.aliyuncs.com/blog/KfAjHn.png" alt="KfAjHn"><br>将 style 文件夹拷贝至自己开发的项目后，还需要在 app.wxss 文件中使用 @import 导入 weui 的样式，如图 3–20 所示。到这里，就可以正常使用 WeUI 库中 微信的官方样式了。</p><h1>bindchange事件</h1><p>bindchange 事件与 bindtap 事件不同，它主要是当输入框中的内容发生改变时，<br>触发对应的事件处理函数，并且输入框中的值可以通过 event.detail.value 来获取<br>wxml 文件代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"weui-cells weui-cells_after-title"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"weui-cell weui-cell_input"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"weui-cell__hd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"weui-label"</span>&gt;</span>qq<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>89<br> <br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"weui-cell__bd"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"weui-input"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请输入 qq"</span> <span class="hljs-attr">bindchange</span>=<span class="hljs-string">"changevalue"</span>/&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>js 文件代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">Page(&#123;<br>  data: &#123;<br>qq:<span class="hljs-number">0</span> &#125;,<br>changevalue:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123; <span class="hljs-built_in">console</span>.log(event) <span class="hljs-keyword">this</span>.setData(&#123;<br>qq: event.detail.value &#125;)<br>&#125;, &#125;)<br></code></pre></td></tr></table></figure><p>嗅券实现的js关键代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js">bindSubmit: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> that = <span class="hljs-keyword">this</span><br>    wx.request(&#123;<br>      url: userUrl+<span class="hljs-string">'register_by_openid'</span>,<br>      data: &#123;<br>        openid: wx.getStorageSync(<span class="hljs-string">'showquan_OPENID'</span>),<br>        globalData: <span class="hljs-built_in">JSON</span>.stringify(app.globalData.userInfo),<br>        name: <span class="hljs-keyword">this</span>.data.name,<br>        tel: <span class="hljs-keyword">this</span>.data.tel,<br>        email: <span class="hljs-keyword">this</span>.data.email,<br>        school: <span class="hljs-keyword">this</span>.data.school,<br>        birthday: <span class="hljs-keyword">this</span>.data.year,<br>        address: <span class="hljs-keyword">this</span>.data.address,<span class="hljs-comment">//地址</span><br>      &#125;,<br>      success: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"12333res"</span>,res)<br>        <span class="hljs-keyword">if</span> (res.data.is_register) &#123;<br>          wx.request(&#123;<br>            url: userUrl + <span class="hljs-string">'getInfo'</span>,<br>            data: &#123;<br>              <span class="hljs-string">'openid'</span>: wx.getStorageSync(<span class="hljs-string">'showquan_OPENID'</span>),<br>            &#125;,<br>            success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res1</span>) </span>&#123;<br>              wx.setStorageSync(<span class="hljs-string">'userinfo'</span>, res1.data.data)<br>            &#125;,<br>          &#125;)<br>          wx.switchTab(&#123;<br>            url: <span class="hljs-string">'../index/index'</span>,<br>          &#125;)<br>        &#125;<br>      &#125;,<br>      fail: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;&#125;,<span class="hljs-comment">//如果调用错误，这里暂时不定义</span><br>    &#125;)<br>  &#125;,<br></code></pre></td></tr></table></figure><p>还涉及到了一个微信位置API接口的调用，主要是获取用户所在位置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">wx</span><span class="hljs-selector-class">.chooseLocation</span>(&#123;<br>      <span class="hljs-attribute">type</span>: <span class="hljs-string">"gcj02"</span>,<br>      success: (res) =&gt; &#123;<br>        console.<span class="hljs-built_in">log</span>(<span class="hljs-string">'地址'</span>,res)<br>        this.<span class="hljs-built_in">setData</span>(&#123;<br>          choosen:res,<br>          address: res.address+res.name,<br>        &#125;)<br>      &#125;,<br>    &#125;)<br></code></pre></td></tr></table></figure><p>最终实现效果：<br><img src="http://jony-blog.oss-cn-beijing.aliyuncs.com/blog/Y6bmxF.png" alt="Y6bmxF"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;微信官方 UI 库 WeUI库的使用&lt;/h1&gt;
&lt;p&gt;WeUI 是一套同微信原生视觉体验一致的基础样式库，由微信官方设计团队为 微信内网页和微信小程序量身设计，令用户的使用感知更加统一。包含 button、cell、 dialog、 progress、 toast、article、actionsheet、icon 等各式元素。WeUI 基础样式 库下载地址:&lt;br&gt;
&lt;a href=&quot;https://github.com/Tencent/weui-wxss&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github-小程序WeUI样式库&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="小程序开发" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="小程序开发" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript this 关键字</title>
    <link href="http://yoursite.com/2020/02/12/js/js-tbyb/"/>
    <id>http://yoursite.com/2020/02/12/js/js-tbyb/</id>
    <published>2020-02-12T09:28:12.000Z</published>
    <updated>2020-03-29T06:11:17.974Z</updated>
    
    <content type="html"><![CDATA[<p>在开发的时候常常会遇到同步和异步这两种概念，因为自己对这个概念很模糊，在网上查阅了很多资料做了对比总结以下，方便以后回顾。</p><h1>什么是同步</h1><p>同步这个概念，简单点说，就是处理任务要一项一项处理，比如我从后台获取一些数据，如果使用同步，那我就要先通过js访问后台，把数据提交给后台，然后等待后台返回数据，而后台处理任务的这段时间，js是什么都不做的，只有等后台的数据处理完反馈过来，js才会做相应的动作。这主要是因为js是一门单线程处理的语言，所以任务之能一项一项处理，但是这样会严重影响用户体验。</p><div class-"note warning"><p>提交请求->等待服务器处理->处理完毕返回 这个期间客户端浏览器不能干任何事</p></div><a id="more"></a><h1>什么是异步</h1><p>异步就是每一个任务都有一个或是多个回调函数，前一个任务执行结束之后，并不是执行后面的任务，而是执行回调函数，后面的任务执行也不是等前一个任务执行完成，而是和前一个任务几乎是并行的，所以程序的执行顺序和任务的排列顺序是不一致的，异步的。</p><h2 id="这里提到了一个概念：回调函数">这里提到了一个概念：回调函数</h2><p>回调函数：其实就是函数作为参数传递给另一个函数，当主函数执行完毕之后再去回调这个函数，比如A作为回调函数，B作为主函数，A当B参数传递给B，当B执行完毕之后再去执行A，也可以是在B执行达到某种条件后去执行A。这个概念比较晦涩，需要你自己练习才能深刻掌握。</p><h2 id="举例说明">举例说明</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">function</span> <span class="hljs-selector-tag">a</span>(b)&#123;<br><span class="hljs-selector-tag">b</span>();<br><span class="hljs-selector-tag">alert</span>(<span class="hljs-string">"我是A"</span>);<br><br>&#125;<br><span class="hljs-selector-tag">function</span> <span class="hljs-selector-tag">b</span>()&#123;<br><span class="hljs-comment">//alert('我是B')</span><br><span class="hljs-selector-tag">setTimeout</span>(<span class="hljs-string">"alert('我是B')"</span>, <span class="hljs-number">1000</span>);<br>&#125;<br><span class="hljs-selector-tag">a</span>(b);<br><span class="hljs-comment">//输出结果却是先输出A再输出B，换而言之，a函数并没有等b函数执行完，就已经执行了输出A的操作。</span><br></code></pre></td></tr></table></figure><p>为了便于你理解回调函数，以及异步，可以将上面的有等待和没有等待的两个函数轮流注释掉看看输出的效果，你也许会理解更加深刻一点。</p><h1>js的执行机制</h1><ol><li>先判断是js代码是同步的还是异步的，同步的就是同步任务，直接进入主线程处理，异步的就进入任务列表</li><li>当任务列表内的异步处理达到了触发条件时候（点击事件被点击时），就进入任务队列</li><li>当所有的主线程的任务执行完毕之后，才会将任务队列里面的任务（回调函数）添加到主线程。</li></ol><p>这也就是为什么会先执行同步，再执行异步的原因，也就是先打印’我是A’，再打印’我是B’的原因,另外也是因为先执行同步，那么如果同步执行时间太长或者出错，死循环，就不会处理异步里面的回调函数了。</p><h1>总结：</h1><p>js的异步处理是和浏览器一起作用的，js是单线程的，但是浏览器是多线程的。浏览器可以同时处理多个异步任务。但是这些异步任务中的回调函数还是在js的主线程中一个一个执行的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发的时候常常会遇到同步和异步这两种概念，因为自己对这个概念很模糊，在网上查阅了很多资料做了对比总结以下，方便以后回顾。&lt;/p&gt;
&lt;h1&gt;什么是同步&lt;/h1&gt;
&lt;p&gt;同步这个概念，简单点说，就是处理任务要一项一项处理，比如我从后台获取一些数据，如果使用同步，那我就要先通过js访问后台，把数据提交给后台，然后等待后台返回数据，而后台处理任务的这段时间，js是什么都不做的，只有等后台的数据处理完反馈过来，js才会做相应的动作。这主要是因为js是一门单线程处理的语言，所以任务之能一项一项处理，但是这样会严重影响用户体验。&lt;/p&gt;
&lt;div class-&quot;note warning&quot;&gt;&lt;p&gt;提交请求-&gt;等待服务器处理-&gt;处理完毕返回 这个期间客户端浏览器不能干任何事&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="javaScript" scheme="http://yoursite.com/categories/javaScript/"/>
    
    
      <category term="前端开发" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="javaScript技巧" scheme="http://yoursite.com/tags/javaScript%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript this 关键字</title>
    <link href="http://yoursite.com/2020/02/12/js/js-this/"/>
    <id>http://yoursite.com/2020/02/12/js/js-this/</id>
    <published>2020-02-12T09:28:12.000Z</published>
    <updated>2020-03-29T06:11:21.408Z</updated>
    
    <content type="html"><![CDATA[<h1>this 关键字</h1><p>面向对象语言中 this 表示当前对象的一个引用。但在 JavaScript 中 this 不是固定不变的，它会随着执行环境的改变而改变。<br>在小程序开发中经常用到，</p><a id="more"></a><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">this</span>.<span class="hljs-keyword">data</span>.value<br></code></pre></td></tr></table></figure><p>读取data中的值，但是常常有时候会忘了this关键字在js中的应用，在此总结一下。</p><ul><li>在方法中，this 表示该方法所属的对象。</li><li>如果单独使用，this 表示全局对象。</li><li>在函数中，this 表示全局对象。</li><li>在函数中，在严格模式下，this 是未定义的(undefined)。</li><li>在事件中，this 表示接收事件的元素。</li><li>类似 call() 和 apply() 方法可以将 this 引用到任何对象。</li></ul><h2 id="方法中的-this">方法中的 this</h2><p>在方法中，this一般指的就是该方法，在小程序开发中，如果this关键字报错，你应该在函数开头使用“that”关键字来代替this。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">let</span> <span class="hljs-literal">that</span> = <span class="hljs-keyword">this</span>;<br></code></pre></td></tr></table></figure><h2 id="单独使用-this">单独使用 this</h2><p>单独使用 this，则它指向全局(Global)对象</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> x = <span class="hljs-keyword">this</span>;<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"demo"</span>).innerHTML = x;<br></code></pre></td></tr></table></figure><h2 id="事件中的-this">事件中的 this</h2><p>在 HTML 事件句柄中，this 指向了接收事件的 HTML 元素：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>JavaScript <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>this<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span> 关键字<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"this.style.display='none'"</span>&gt;</span>点我后我就消失了<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;this 关键字&lt;/h1&gt;
&lt;p&gt;面向对象语言中 this 表示当前对象的一个引用。但在 JavaScript 中 this 不是固定不变的，它会随着执行环境的改变而改变。&lt;br&gt;
在小程序开发中经常用到，&lt;/p&gt;
    
    </summary>
    
    
      <category term="javaScript" scheme="http://yoursite.com/categories/javaScript/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="javaScript技巧" scheme="http://yoursite.com/tags/javaScript%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>小程序开发-unix时间戳转换</title>
    <link href="http://yoursite.com/2020/01/23/wx/wx-unix/"/>
    <id>http://yoursite.com/2020/01/23/wx/wx-unix/</id>
    <published>2020-01-23T07:34:13.000Z</published>
    <updated>2020-03-29T06:14:10.139Z</updated>
    
    <content type="html"><![CDATA[<h1>js如何将unix时间戳转换为正常时间</h1><p>通常我们在PHP或者数据库中获取的时间都位unix时间戳，需要格式转换才能正常显示。<br>在项目中定义一个js文件，将时间戳转换代码封装起来</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 接口暴露</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  formatTime: formatTime,<br>  js_date_time: js_date_time<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">js_date_time</span>(<span class="hljs-params">unixtime</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"111111111111111"</span>, unixtime);<br>  <span class="hljs-keyword">var</span> dateTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-built_in">parseInt</span>(unixtime) * <span class="hljs-number">1000</span>)<br>  <span class="hljs-keyword">var</span> year = dateTime.getFullYear();<br>  <span class="hljs-keyword">var</span> month = dateTime.getMonth() + <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">var</span> day = dateTime.getDate();<br>  <span class="hljs-keyword">var</span> hour = dateTime.getHours();<br>  <span class="hljs-keyword">var</span> minute = dateTime.getMinutes();<br>  <span class="hljs-keyword">var</span> second = dateTime.getSeconds();<br>  <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>  <span class="hljs-keyword">var</span> now_new = <span class="hljs-built_in">Date</span>.parse(now.toDateString()); <span class="hljs-comment">//typescript转换写法</span><br>  <span class="hljs-keyword">var</span> milliseconds = now_new - dateTime;<br>  <span class="hljs-keyword">var</span> timeSpanStr = year + <span class="hljs-string">'-'</span> + month + <span class="hljs-string">'-'</span> + day + <span class="hljs-string">' '</span> + hour + <span class="hljs-string">':'</span> + minute;<br>  <span class="hljs-keyword">return</span> timeSpanStr;<br>&#125;<br></code></pre></td></tr></table></figure><p>在需要时间戳转换的页面引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> utils = <span class="hljs-built_in">require</span>(<span class="hljs-string">"../../utils/util.js"</span>)<br></code></pre></td></tr></table></figure><p>转换代码的使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">utils.js_date_time(wx.getStorageSync(<span class="hljs-string">'userinfo'</span>).gmt_create)<br><span class="hljs-comment">//例如将 1585025901=&gt;处理后显示为2020-3-24 12:58</span><br></code></pre></td></tr></table></figure><h1>以上</h1><p>unix时间戳转换在开发中是很常用的工具，有些框架将其封装了起来，比如thinkPHP直接调用data()函数即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;js如何将unix时间戳转换为正常时间&lt;/h1&gt;
&lt;p&gt;通常我们在PHP或者数据库中获取的时间都位unix时间戳，需要格式转换才能正常显示。&lt;br&gt;
在项目中定义一个js文件，将时间戳转换代码封装起来&lt;/p&gt;
    
    </summary>
    
    
      <category term="小程序开发" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="小程序开发" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="javaScript技巧" scheme="http://yoursite.com/tags/javaScript%E6%8A%80%E5%B7%A7/"/>
    
      <category term="避坑指南" scheme="http://yoursite.com/tags/%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>小程序开发-登录</title>
    <link href="http://yoursite.com/2020/01/22/wx/wx-denglu/"/>
    <id>http://yoursite.com/2020/01/22/wx/wx-denglu/</id>
    <published>2020-01-22T15:34:26.000Z</published>
    <updated>2020-03-29T06:14:03.382Z</updated>
    
    <content type="html"><![CDATA[<h1>授权页面</h1><h2 id="小程序登录">小程序登录</h2><p>小程序可以通过微信官方提供的登录能力方便地获取微信提供的用户身份标<br>识，快速建立小程序内的用户体系。如图所示，小程序通过wx.login()获取code， 然后通过*wx.request()*发送 code 至开发者服务器，开发者服务器将登录凭证 <strong>appid、 appsecret</strong>与<strong>code</strong>用于校验微信接口，微信接口服务向开发者服务器返回用户唯一 标识 <strong>OpenID</strong>和会话密钥session—key。开发者服务器实现自定义登录状态与 openid 与 session_key关联，并向小程序返回自定义状态。小程序将自定义登录状态 存入 storage，并用于后续 wx.request 发起业务请求。</p><a id="more"></a><p><img src="http://jony-blog.oss-cn-beijing.aliyuncs.com/blog/urFvwF.png" alt="urFvwF"><br>对于某个微信小程序，每个用户访问该小程序都有产生一个唯一的 openid，这 个 openid 为用户访问该小程序的标识符，即每个用户的 openid 都是不一样的。因 此，可以把 **openid **作为用户唯一标识符(类似身份证号)，并存于数据库中用以后续操作。</p><h2 id="wx-login">wx.login()</h2><p>调用wx.login()接口获取登录凭证(code),通过凭证进而换取用户登录态信息,其中wx.login( )接口</p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>timeout</td><td>number</td><td>否</td><td>超时时间，单位 ms</td></tr><tr><td>success</td><td>function</td><td>否</td><td>接口调用成功的回调函数</td></tr><tr><td>fail</td><td>function</td><td>否</td><td>接口调用失败的回调函数</td></tr><tr><td>complete</td><td>function</td><td>否</td><td>接口调用结束的回调函数(调用成功失败都会执行)</td></tr></tbody></table><p>由于 app.js 会先于其他页面执行，所以比较适合处理一些注册函数，因此将 wx.login( )方法写在 app.js 文件中。</p><h2 id="wx-request">wx.request()</h2><h3 id="这个函数很重要，一定要很熟练">!!!这个函数很重要，一定要很熟练</h3><p>wx.request( )主要用于发送 https 网络请求,一些基本属性表<br><img src="http://jony-blog.oss-cn-beijing.aliyuncs.com/blog/kpFd4f.png" alt="kpFd4f"><br>在实际应用中，最常用的还是<em><strong>URL</strong></em>和<em><strong>data</strong></em>，这两项作为向后台发送数据请求的链接地址和传送的参数，重要程度可见一斑，后台接收数据的方式一般为GET方法。</p><p>success回调函数也很重要，通过判断是否调用成功，来做相应的动作，比如回掉成功之后为data赋值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">wx.request(&#123;<br>  url: userUrl + <span class="hljs-string">'getInfo'</span>,<br>  data: &#123;<br>    <span class="hljs-string">'openid'</span>: res.data.openid,<br>  &#125;,<br>  success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res1</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"用户信息app.js"</span>, res1)<br>    wx.setStorageSync(<span class="hljs-string">'userinfo'</span>, res1.data.data)<br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p>上面这段代码，掩饰了用wx.request函数，通过调用API接口，向后台传入参数’openid’，来查询用户的用户信息，如果调用成功的话，把获取到的数据赋值给<strong>Storage</strong>。</p><h2 id="数据缓存">数据缓存</h2><p>每个微信小程序都可以有自己的本地缓存，可以通过数据缓存 API 可以对本地<br>缓存进行设置、获取和清理。同一个微信用户，同一个小程序 storage 上限为 10MB。 localStorage 以用户维度隔离，同一台设备上，A 用户无法读取到 B 用户的数据。<br>注意: 如果用户储存空间不足，微信会清空最近最久未使用的小程序的本地缓 存。因此不建议将关键信息全部存在localStorage，以防储存空间不足或用户换设备 的情况。<br>数据缓存 API 主要有 5 类，包括数据的存储、获取、移除、清空，以及获取存 储信息，每类均包含同步与异步两种</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>wx.setStorage(Object object)</td><td>数据的存储(异步)</td></tr><tr><td>wx.setStorageSync(string key, any data)</td><td>数据的存储(同步)</td></tr><tr><td>wx.getStorage(Object object)</td><td>数据的获取(异步)</td></tr><tr><td>wx.getStorageSync(string key)</td><td>数据的获取(同步)</td></tr><tr><td>wx.getStorageInfo(Object object)</td><td>存储信息的获取(异步)</td></tr><tr><td>wx.getStorageInfoSync()</td><td>存储信息的获取(同步)</td></tr><tr><td>wx.removeStorage(Object object)</td><td>数据的移除(异步)</td></tr><tr><td>wx.removeStorageSync(string key)</td><td>数据的移除(同步)</td></tr><tr><td>wx.clearStorage(Object object)</td><td>数据的清空(异步)</td></tr><tr><td>wx.clearStorageSync()</td><td>数据的清空(同步)</td></tr></tbody></table><p>表示同步，因此 API 函数中带有Sync后缀的函数为同步函数。</p><h3 id="同步函数与异步函数之间的区别">同步函数与异步函数之间的区别</h3><p>异步不会阻塞当前任务，同步缓存直到同步方法处理完才能继续往下执行。另外异步函数中 含有成功回调函数，可用于表示数据处理成功后的操作。<br>以 wx.setStroage()为例子：<br>通过 wx.request()返回的openid 存储于本地，方便 openid 的获取，使用wx.setStorage()的代码示例如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">wx.setStorageSync(<span class="hljs-string">'OPENID'</span>, res.data.openid)<br></code></pre></td></tr></table></figure><p>如果使用 wx.setStorageSync()进行数据存储，可以对数据存储成功后进行操作，<br>代码较 wx.setStorage()有变化，具体代码如下:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">wx</span><span class="hljs-selector-class">.setStorage</span>(&#123; <span class="hljs-attribute">key</span>: <span class="hljs-string">'test'</span>,<br>data: <span class="hljs-string">'begin'</span>, success:<span class="hljs-built_in">function</span>()&#123;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">'存储成功'</span>) &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="wx-showModal">wx.showModal()</h2><p>小程序使用 wx.showModel(Object object)显示模态对话框<br>基本参数：<br><img src="http://jony-blog.oss-cn-beijing.aliyuncs.com/blog/MUcsiq.png" alt="MUcsiq"><br>例如嗅券小程序，当发现没有用户未注册，则跳转出注册窗口提示用户注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (!res.data.is_register) &#123; wx.showModal(&#123;<br>title: <span class="hljs-string">'提示'</span>,<br>content: <span class="hljs-string">'请先注册'</span>, <span class="hljs-attr">showCancel</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">confirmText</span>: <span class="hljs-string">"确定"</span>, <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;<br>wx.navigateTo(&#123;<br>url: <span class="hljs-string">'/pages/register/userlogin'</span>, &#125;)<br>&#125; &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;授权页面&lt;/h1&gt;
&lt;h2 id=&quot;小程序登录&quot;&gt;小程序登录&lt;/h2&gt;
&lt;p&gt;小程序可以通过微信官方提供的登录能力方便地获取微信提供的用户身份标&lt;br&gt;
识，快速建立小程序内的用户体系。如图所示，小程序通过wx.login()获取code， 然后通过*wx.request()*发送 code 至开发者服务器，开发者服务器将登录凭证 &lt;strong&gt;appid、 appsecret&lt;/strong&gt;与&lt;strong&gt;code&lt;/strong&gt;用于校验微信接口，微信接口服务向开发者服务器返回用户唯一 标识 &lt;strong&gt;OpenID&lt;/strong&gt;和会话密钥session—key。开发者服务器实现自定义登录状态与 openid 与 session_key关联，并向小程序返回自定义状态。小程序将自定义登录状态 存入 storage，并用于后续 wx.request 发起业务请求。&lt;/p&gt;
    
    </summary>
    
    
      <category term="小程序开发" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="小程序开发" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>小程序开发-页面跳转</title>
    <link href="http://yoursite.com/2020/01/16/wx/wx-tiaozhuan/"/>
    <id>http://yoursite.com/2020/01/16/wx/wx-tiaozhuan/</id>
    <published>2020-01-16T07:34:13.000Z</published>
    <updated>2020-03-29T06:14:06.488Z</updated>
    
    <content type="html"><![CDATA[<h1>navigator 组件</h1><p>navigator 跳转分为两个状态， 一种是关闭当前页面，一种是不关闭当前页面。<br><img src="http://jony-blog.oss-cn-beijing.aliyuncs.com/blog/8kE3OI.png" alt="8kE3OI"></p><a id="more"></a><p>其中 open-type 的合法值<br><img src="http://jony-blog.oss-cn-beijing.aliyuncs.com/blog/soyKFe.png" alt="soyKFe"><br>使用示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">navigator</span> <span class="hljs-attr">url</span>=<span class="hljs-string">"需要跳转的页面"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"样式类"</span> <span class="hljs-attr">hover-class</span>=<span class="hljs-string">"点击后的样式"</span>&gt;</span><br></code></pre></td></tr></table></figure><h1>wx.showToast()</h1><p>wx.showToast( )与 wx.showMaodel( )一样是界面交互中的一种消息提示框，基本属性如下<br><img src="http://jony-blog.oss-cn-beijing.aliyuncs.com/blog/64OMJD.png" alt="64OMJD"></p><p>icon的合法属性如下<br><img src="http://jony-blog.oss-cn-beijing.aliyuncs.com/blog/aRK9pR.png" alt="aRK9pR"><br>在嗅券中，有很多处使用的案例，例如在签到页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">wx.showToast(&#123;<br>    icon: <span class="hljs-string">'loading'</span>,<span class="hljs-comment">//图标是loading</span><br>    title: sum.data.info,<span class="hljs-comment">//显示后台返回结果中的info信息</span><br>&#125;)<br></code></pre></td></tr></table></figure><h1>配置文件的使用</h1><p>所有的 wx.request()请求，url的网址都有很多共同之处，所以把共同之处作为一个宏进行定义，后面维护起来方便修改与迁移</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// var apiUrl = "http://localhost/show/index.php/Api/"//本地测试地址</span><br><span class="hljs-comment">// var ddApi = "http://localhost/show/pddApi/show/"</span><br><br><span class="hljs-keyword">var</span> apiUrl = <span class="hljs-string">"https://服务器地址/show/index.php/Api/"</span><span class="hljs-comment">//小程序内部接口</span><br><span class="hljs-keyword">var</span> ddApi = <span class="hljs-string">"https://服务器地址/show//pddApi/show/"</span><span class="hljs-comment">//拼多多接口</span><br><br><span class="hljs-keyword">var</span> config = &#123;<br>  apiUrl,<br>  appid,<br>  wxUrl: <span class="hljs-string">`<span class="hljs-subst">$&#123;apiUrl&#125;</span>Weixin/`</span>,<span class="hljs-comment">//注意这里使用的是反斜杠！</span><br>  userUrl: <span class="hljs-string">`<span class="hljs-subst">$&#123;apiUrl&#125;</span>User/`</span>,<br>  signUrl: <span class="hljs-string">`<span class="hljs-subst">$&#123;apiUrl&#125;</span>Sign/`</span>,<br>  pddApi: <span class="hljs-string">`<span class="hljs-subst">$&#123;ddApi&#125;</span>`</span>,<br>&#125;;<br><br><span class="hljs-built_in">module</span>.exports = config<span class="hljs-comment">// 接口暴露，可以在其他文件中用到它</span><br></code></pre></td></tr></table></figure><p>配置文件方便的把一些常用的，或者有共同之处的代码宏定义，当下次使用时直接调用就可以，这就类似于C语言的宏。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;navigator 组件&lt;/h1&gt;
&lt;p&gt;navigator 跳转分为两个状态， 一种是关闭当前页面，一种是不关闭当前页面。&lt;br&gt;
&lt;img src=&quot;http://jony-blog.oss-cn-beijing.aliyuncs.com/blog/8kE3OI.png&quot; alt=&quot;8kE3OI&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="小程序开发" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="小程序开发" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>心理测试小程序学习笔记</title>
    <link href="http://yoursite.com/2020/01/06/wx/wx-bushu%206/"/>
    <id>http://yoursite.com/2020/01/06/wx/wx-bushu%206/</id>
    <published>2020-01-06T07:34:13.000Z</published>
    <updated>2020-03-29T06:13:51.503Z</updated>
    
    <content type="html"><![CDATA[<h1>知识点整理</h1><h2 id="bindtap事件绑定">bindtap事件绑定</h2><p>事件是视图层到逻辑层的通讯方式。事件可以将用户的行为反馈到逻辑层进行 处理。事件可以绑定在组件上，当达到触发事件，就会执行逻辑层中对应的事件处 理函数。代码示例如下。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--index.wxml--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"begininfo"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">'beginAnswer'</span>&gt;</span> 开始测试 <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//index.js</span><br>beginAnswer: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; wx.navigateTo(&#123;<br>url: <span class="hljs-string">'../test/test'</span> &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>在 index.wxml 文件中，将 bindtap 事件绑定在 button 组件上，其中 bindtap=’beginAnswer’。当测试者单击“开始测试”按钮时，会触发事件，就会执行 index.js 中对应的事件处理函数 beginAnswer，该事件处理函数在触发后，执行页面 跳转，跳转至 test 页面。</p><table><thead><tr><th>事件处理函数</th><th>所处页面</th><th>事件触发结果</th></tr></thead><tbody><tr><td>beginAnswer</td><td>row 1 col 2</td><td>跳转至 test 页面</td></tr><tr><td>answerClickA</td><td>test</td><td>显示下一题，并判断 A 对应的是题库中哪个选择，给对应选项的值+1，满足 index=20 时，跳至 result页面</td></tr><tr><td>answerClickB</td><td>test</td><td>显示下一题，并判断 B 对应的是题库中 哪个选择，给对应选项的值+1，满足 index=20</td></tr><tr><td>answerClickC</td><td>test</td><td>显示下一题，并判断 B 对应的是题库中哪个选择，给对应选项的值+1，满足 index=20 时，跳至 result 页面</td></tr></tbody></table><h2 id="路由">路由</h2><p>小程序 API 中的路由共有 5 种</p><table><thead><tr><th>路由</th><th>路由规则</th></tr></thead><tbody><tr><td>wx.switchTab</td><td>跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面</td></tr><tr><td>wx.reLaunch</td><td>关闭当前页面，跳转到应用内的某个页面。</td></tr><tr><td>wx.redirectTo</td><td>关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面</td></tr><tr><td>wx.navigateTo</td><td>保留当前页面，跳转到应用内的某个页面。但是不能跳到tabbar 页面。使用 wx.navigateBack 可以返回到原页面。小程序 中页面栈最多十层</td></tr><tr><td>wx.navigateBack</td><td>关闭当前页面，返回上一页面或多级页面。可通过 getCurrentPages 获取当前的页面栈，决定需要返回几层。</td></tr></tbody></table><h2 id="声明变量与变量赋值">声明变量与变量赋值</h2><h3 id="声明变量">声明变量</h3><p>在 js 中，未在 data 数组中定义的变量，可以通过 var语句来进行变量声明，在声明变量的同时也可以向变量赋值，如 test.js 文件中的一段代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">setList: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">var</span> newList = <span class="hljs-keyword">this</span>.data.list.sort(<span class="hljs-keyword">this</span>.randSort);<br><span class="hljs-keyword">this</span>.setData(&#123; <span class="hljs-attr">list</span>: newList,<br>&#125;); &#125;,<br></code></pre></td></tr></table></figure><h3 id="变量赋值">变量赋值</h3><p>在 js 文件的函数中给变量赋值的方法有两种，这里举一个简单的例子，首先将 index.wxml 文件中 button 的“开始测试”改为“{{msg}}”，使 button 中的文字变成 一个变量，然后在 index.js 文件的 data 数组中添加变量 msg，并赋予初值“开始测 试”，最后将事件处理函数 beginAnswer 进行修改</p><!--index.wxml--><view class="begininfo"><button bindtap='beginAnswer'> {{msg}} </button> </view><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">//index.js</span><br><span class="hljs-selector-tag">Page</span>(&#123;<br>  <span class="hljs-attribute">data</span>: &#123;<br><span class="hljs-attribute">msg</span>:<span class="hljs-string">'开始测试'</span><br>&#125;,<br><span class="hljs-comment">//事件处理函数</span><br><span class="hljs-attribute">beginAnswer</span>: function () &#123;<br>this.setData(&#123; <span class="hljs-attribute">msg</span>:<span class="hljs-string">'测试结束'</span><br>&#125;) &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p>使用 this.setData({ })可以将数据从逻辑层发送到视图层(异步)，同时改变对 应的 this.data 的值(同步)，当单击“开始测试”按钮时，msg 的值变为“测试结 束”，页面按钮中文字内容也变为“测试结束”。<br>如果将 this.setData({ })改为使用 this.data.msg = ‘测试结束’ 来改变 msg 变量的 值，会发现虽然可以改变 msg 的值，但是页面不会更新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//index.js</span><br>Page(&#123;<br>  data: &#123;<br>msg:<span class="hljs-string">'开始测试'</span> &#125;,<br><span class="hljs-comment">//事件处理函数</span><br>beginAnswer: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">this</span>.data.msg = <span class="hljs-string">'测试结束'</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'msg 的值:'</span>,<span class="hljs-keyword">this</span>.data.msg) &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>总的来说，this.setData 是用来更新界面的，this.data 是用来获取页面 data对象的，它们都可以用于给变量赋值，注意 this.setData 中不能使用 console.log( )语句,如果需要查看赋值后变量的值，需要在 this.setData({ })语句外使用 console.log( )打印 查看变量的值。</p></blockquote><h2 id="绝对路径与相对路径">绝对路径与相对路径</h2><h3 id="相对路径">相对路径</h3><p>在 index.js 文件中，事件处理函数 beginAnswer 的 wx.navigateTo 路由的 url 使用的就是相对路径，其中“…/”指的是当前文件所在的上一级目录，即 index 文件夹 所在的目录，“…/test/test”指的就是 index 所在目录中 test 文件夹中的 test 文件。 另外“./”指的是当前目录，“…/…/”指的是当前文件所在的上上级目录，以此类推。</p><h3 id="绝对路径">绝对路径</h3><p>“/pages/test/test”即为 test 文件所在的绝对路径，若将 url 改为绝对路径 “/pages/test/test”也能实现页面的跳转。</p><h2 id="带参跳转">带参跳转</h2><p>在 test.js 文件中，answerClickA 的一段代码实现了当 index=20 时，从 test 页面 跳转至 result 页面，跳转时携带参数 A、B 和 C 的值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.<span class="hljs-keyword">data</span>.index == <span class="hljs-number">20</span>) &#123; wx.redirectTo(&#123;<br>url: <span class="hljs-string">'/pages/result/result?A='</span> + <span class="hljs-keyword">this</span>.<span class="hljs-keyword">data</span>.A + <span class="hljs-string">'&amp;B='</span> + <span class="hljs-keyword">this</span>.<span class="hljs-keyword">data</span>.B + <span class="hljs-string">'&amp;C='</span> + <span class="hljs-keyword">this</span>.<span class="hljs-keyword">data</span>.C,<br>&#125;) &#125;<br></code></pre></td></tr></table></figure><p>如果想用使用页面参数，可以在 result 页面的 js 文件中使用生命周期函数来获 取页面参数，给生命周期函数 function()中定义一个值，这边定义为 options，即 可使用 option.A 获取 A 的值，并赋值给 result 页面的变量 A，B、C 也一样。开发者 可以尝试用 console.log(options)打印看一下 options 中的值，</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;知识点整理&lt;/h1&gt;
&lt;h2 id=&quot;bindtap事件绑定&quot;&gt;bindtap事件绑定&lt;/h2&gt;
&lt;p&gt;事件是视图层到逻辑层的通讯方式。事件可以将用户的行为反馈到逻辑层进行 处理。事件可以绑定在组件上，当达到触发事件，就会执行逻辑层中对应的事件处 理函数。代码示例如下。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs html&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;&amp;lt;!--index.wxml--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&quot;begininfo&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;bindtap&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&#39;beginAnswer&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt; 开始测试 &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;view&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="小程序开发" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="小程序开发" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="实战总结" scheme="http://yoursite.com/tags/%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>小程序开发-传值</title>
    <link href="http://yoursite.com/2020/01/06/wx/wx-chuanzhi/"/>
    <id>http://yoursite.com/2020/01/06/wx/wx-chuanzhi/</id>
    <published>2020-01-06T07:34:13.000Z</published>
    <updated>2020-03-29T06:18:10.075Z</updated>
    
    <content type="html"><![CDATA[<h1>小程序如何愉快的传值</h1><h2 id="巧用Storage">巧用Storage</h2><p>这个数据是小程序官方给予的一种储存能力，如果用户不主动删除缓存里面的值，会一直保持在小程序中，在调试器的storage选项中可以看到已经缓存的数据。</p><p>比如将会经常用到的openID存在里面，在用的时候调用。<br>具体实现：</p><blockquote><p>存入</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//将 SESSIONID 保存到本地 storage </span><br> wx.setStorageSync(<span class="hljs-string">'showquan_OPENID'</span>, res.data.openid)<br></code></pre></td></tr></table></figure><a id="more"></a><blockquote><p>获取使用</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">//作为参数提交给后台接口</span><br><span class="hljs-selector-tag">wx</span><span class="hljs-selector-class">.request</span>(&#123;<br>  <span class="hljs-attribute">url</span>: signUrl + <span class="hljs-string">"signin"</span>,<br>  <span class="hljs-attribute">data</span>: &#123;<br>    <span class="hljs-attribute">sum</span>: num,<br>    <span class="hljs-attribute">lntegral</span>: that.data.lntegral,<br>    <span class="hljs-attribute">openid</span>: wx.getStorageSync(<span class="hljs-string">'showquan_OPENID'</span>),<br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="前端给js传值-data-oid">前端给js传值-data-oid</h2><p>在开发中有时候会遇到想给后台js反馈，比如告诉js我现在点击的是第几个按钮</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--html--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mp-slideview</span> <span class="hljs-attr">buttons</span>=<span class="hljs-string">"&#123;&#123;slideButtons&#125;&#125;"</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">"&#123;&#123;true&#125;&#125;"</span> <span class="hljs-attr">bindbuttontap</span>=<span class="hljs-string">"slideButtonTap"</span> <span class="hljs-attr">data-oid</span>=<span class="hljs-string">"&#123;&#123;de&#125;&#125;"</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!--js通过前端点击按钮的日志信息中，获取到返回的参数oid--&gt;<br>slideButtonTap(e) &#123;<br>    <span class="hljs-keyword">var</span> idx = e.currentTarget.dataset.oid<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="通过get方法">通过get方法</h2><p>这有点类似于web的地址传值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">navigator</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"weui-slidecells"</span>  <span class="hljs-attr">id</span>=<span class="hljs-string">"sp-&#123;&#123;item.goods_id&#125;&#125;"</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">"&#123;&#123;goods_list&#125;&#125;"</span> <span class="hljs-attr">wx:key</span>=<span class="hljs-string">"goods_id"</span> <span class="hljs-attr">wx:for-index</span>=<span class="hljs-string">"de"</span> <span class="hljs-attr">url</span>=<span class="hljs-string">"../goodsDetail/goodsDetail?id=&#123;&#123;item.goods_id&#125;&#125;&amp;search=&#123;&#123;searchID&#125;&#125;"</span> &gt;</span><br>//通过   地址？key1=参数1 &amp; key2=参数2的方式传入两个参数<br></code></pre></td></tr></table></figure><p>目的页面获取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">onLoad: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">pid</span>) </span>&#123;<span class="hljs-comment">//获取传入参数</span><br>    <span class="hljs-keyword">let</span> that = <span class="hljs-keyword">this</span><br>    <span class="hljs-keyword">this</span>.setData(&#123;<br>      userinfo: wx.getStorageSync(<span class="hljs-string">'userinfo'</span>),<br>      searchID: pid.search  <span class="hljs-comment">//参数的调用</span><br>    &#125;)<br>    wx.request(&#123;<br>      url: pddApi + <span class="hljs-string">"PddDdkGoodsDetail.php"</span>,<br>      data:&#123;<br>        pid : pid.id,  <span class="hljs-comment">//参数调用</span><br>        searchID:pid.search<br>      &#125;,<br>      ……………………<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="后台给前端传值">后台给前端传值</h2><p>后台可以将json数据发送给前端</p><p><img src="http://jony-blog.oss-cn-beijing.aliyuncs.com/blog/VGK5NR.png" alt="VGK5NR"></p><p>例如首页的专题内容，就是通过前端调用后台接口，后台在拼多多查询活动信息，并将拼多多的数据用json格式转发给前端，前端解析即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;小程序如何愉快的传值&lt;/h1&gt;
&lt;h2 id=&quot;巧用Storage&quot;&gt;巧用Storage&lt;/h2&gt;
&lt;p&gt;这个数据是小程序官方给予的一种储存能力，如果用户不主动删除缓存里面的值，会一直保持在小程序中，在调试器的storage选项中可以看到已经缓存的数据。&lt;/p&gt;
&lt;p&gt;比如将会经常用到的openID存在里面，在用的时候调用。&lt;br&gt;
具体实现：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;存入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs js&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;//将 SESSIONID 保存到本地 storage &lt;/span&gt;&lt;br&gt; wx.setStorageSync(&lt;span class=&quot;hljs-string&quot;&gt;&#39;showquan_OPENID&#39;&lt;/span&gt;, res.data.openid)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="小程序开发" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="小程序开发" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="实战总结" scheme="http://yoursite.com/tags/%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
